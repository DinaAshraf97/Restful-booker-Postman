{
  "collection": {
    "_": {
      "postman_id": "cd497a36-375d-4e6c-9794-f7d1b5aaf75a",
      "exporter_id": "27325402"
    },
    "item": [
      {
        "id": "64bacce2-d091-4981-b134-19e761868e0b",
        "name": "Auth",
        "item": [
          {
            "id": "5f50c4b1-58cd-40a3-a2d7-922f8f9aae7c",
            "name": "CREATE Token",
            "request": {
              "url": {
                "path": [
                  "auth"
                ],
                "host": [
                  "{{baseurl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "45eaf1ec-1183-4853-a223-fc3a493a0c0f",
                  "type": "text/javascript",
                  "exec": [
                    "//verify status code is 200 OK\r",
                    "pm.test(\"Status code is 200 OK\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "//verify response is not null\r",
                    "pm.test(\"Check respone is not null\"),function(){\r",
                    "pm.expect(pm.response.json()).to.not.equal(null)\r",
                    "}\r",
                    "//verify response body contins the word token\r",
                    "pm.test(\"Body contains token\", function () {\r",
                    "    pm.expect(pm.response.text()).to.include(\"token\");\r",
                    "}); \r",
                    "//verify token is not null\r",
                    "pm.test(\"Check token is not null\"),function(){\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.token).to.not.equal(null)\r",
                    "}\r",
                    "//verify token contains string\r",
                    "pm.test(\"token contains string\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(typeof jsonData.token).to.eql(\"string\");\r",
                    "    });\r",
                    "\r",
                    "//set token as environmdent variable\r",
                    "pm.environment.set(\"token\", pm.response.json().token)\r",
                    "\r",
                    ""
                  ],
                  "_lastExecutionId": "98fbbe2c-5fda-46a5-aea5-0cfdb55b4014"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disabledSystemHeaders": {
                "content-type": true
              }
            }
          }
        ],
        "event": []
      },
      {
        "id": "f4af5cd0-779d-47f6-8110-5f4f2d94f53c",
        "name": "Booking",
        "item": [
          {
            "id": "977eb4c9-af16-4799-a9d6-4b435e252599",
            "name": "GET ALL Booking IDs",
            "request": {
              "url": {
                "path": [
                  "booking"
                ],
                "host": [
                  "{{baseurl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "11271253-d3e5-4a69-932a-6c3ae0e5b5ac",
                  "type": "text/javascript",
                  "exec": [
                    "// Verify status code is 200 OK\r",
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "//verify response is not null\r",
                    "pm.test(\"Check respone is not null\"),function(){\r",
                    "pm.expect(pm.response.json()).to.not.equal(null)\r",
                    "}\r",
                    "//verify response is an object\r",
                    "pm.test(\"Response is an object\"),function(){\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(typeof jsonData).to.eql(Object)\r",
                    "}\r",
                    "//verify ID is not null\r",
                    "pm.test(\"Check token is not null\"),function(){\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.bookingid).to.not.equal(null)\r",
                    "}\r",
                    "//verify ID contains numbers only\r",
                    "pm.test(\"Check bookingid is a number\"),function(){\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(typeof jsonData.bookingid).to.eql(Number)\r",
                    "}"
                  ],
                  "_lastExecutionId": "44c8fb10-8ecc-49ac-804e-2e2be95cbdb0"
                }
              }
            ]
          },
          {
            "id": "d507db68-7a1f-4bba-a58e-87335a7758aa",
            "name": "CREATE Booking",
            "request": {
              "url": {
                "path": [
                  "booking"
                ],
                "host": [
                  "{{baseurl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Accept",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\": \"{{firstname}}\",\r\n    \"lastname\": \"{{lastname}}\",\r\n    \"totalprice\": {{totalprice}},\r\n    \"depositpaid\": {{depositpaid}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkin}}\",\r\n        \"checkout\": \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\": \"{{additionalneeds}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fd6112f4-0c0e-48f2-b011-5f7392fc1f76",
                  "type": "text/javascript",
                  "exec": [
                    "// Verify the request method is POST\r",
                    "pm.test(\"Successful POST request\", function () {\r",
                    "    pm.actualMethod = pm.request.method;\r",
                    "    pm.expect(pm.actualMethod).to.eq(\"POST\");\r",
                    "});\r",
                    "\r",
                    "// Verify status code is 200 OK\r",
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "var jsonData = pm.response.json();\r",
                    "\r",
                    "// create environment variable for bookingid\r",
                    "pm.environment.set(\"bookingid\", jsonData.bookingid);\r",
                    "\r",
                    "// check the first name\r",
                    "pm.test(\"First name is correct\", function () {\r",
                    "    var firstName = pm.environment.get(\"firstname\");\r",
                    "    pm.expect(jsonData.booking.firstname).to.eql(firstName);\r",
                    "});\r",
                    "\r",
                    "// check the last name\r",
                    "pm.test(\"Last name is correct \", function () {\r",
                    "    var lastName = pm.environment.get(\"lastname\");\r",
                    "    pm.expect(jsonData.booking.lastname).to.eql(lastName);\r",
                    "});\r",
                    "\r",
                    "// check the total price \r",
                    "var totalPrice = pm.environment.get(\"totalprice\");\r",
                    "pm.test(\"Total price is correct \", function () {\r",
                    "    pm.expect(jsonData.booking.totalprice).to.eql(totalPrice);\r",
                    "});\r",
                    "\r",
                    "// check the deposit paid \r",
                    "var depositPaid = pm.environment.get(\"depositpaid\");\r",
                    "\r",
                    "pm.test(\"Check Deposit paid \", function () {\r",
                    "    pm.expect(jsonData.booking.depositpaid).to.eql(depositPaid);\r",
                    "});\r",
                    "\r",
                    "// check the check in \r",
                    "var checkinDate = pm.environment.get(\"checkin\");\r",
                    "pm.test(\"Check in is correct \", function () {\r",
                    "    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(checkinDate);\r",
                    "});\r",
                    "\r",
                    "// check the check out \r",
                    "var checkoutDate = pm.environment.get(\"checkout\");\r",
                    "pm.test(\"Check out is correct \", function () {\r",
                    "    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(checkoutDate);\r",
                    "});\r",
                    "\r",
                    "// check the additional needs \r",
                    "var addetionNeeds = pm.environment.get(\"additionalneeds\");\r",
                    "pm.test(\"Additional needs  is correct \", function () {\r",
                    "    pm.expect(jsonData.booking.additionalneeds ).to.eql(addetionNeeds);\r",
                    "});\r",
                    "\r",
                    "// Verify there is no field in the API response equal null.\r",
                    "// check the first name not equal null\r",
                    "pm.test(\"The first name is not equal null \", function () {\r",
                    "        pm.expect(jsonData.booking.firstname).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the last name not equal null\r",
                    "pm.test(\"The Last name is not equal null \", function () {\r",
                    "    pm.expect(jsonData.booking.lastname).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the total price not equal null\r",
                    "pm.test(\"The total price is not equal null \", function () {\r",
                    "    pm.expect(jsonData.booking.totalprice).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the deposit paid not equal null\r",
                    "pm.test(\"The deposit paid is not equal null \", function () {\r",
                    "    pm.expect(jsonData.booking.depositpaid).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the check in not equal null\r",
                    "pm.test(\"The check in is not equal null \", function () {\r",
                    "        pm.expect(jsonData.booking.bookingdates.checkin).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the check out not equal null\r",
                    "pm.test(\"The check out is not equal null \", function () {\r",
                    "    pm.expect(jsonData.booking.bookingdates.checkout).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the additional needs not equal null\r",
                    "pm.test(\"The additional needs is not equal null \", function () {\r",
                    "    pm.expect(jsonData.booking.additionalneeds ).to.not.eql(\"null\");\r",
                    "});\r",
                    "\r",
                    "// Verify the data type of all fields\r",
                    "// check the first name is string\r",
                    "pm.test(\"The first name data is String\", function () {\r",
                    "        pm.expect(typeof jsonData.booking.firstname).to.be.eql(\"string\");\r",
                    "});\r",
                    "\r",
                    "// check the last name is string\r",
                    "pm.test(\"The Last name is String \", function () {\r",
                    "    pm.expect(typeof jsonData.booking.lastname).to.be.eql(\"string\");\r",
                    "});\r",
                    "\r",
                    "// check the total price is number\r",
                    "pm.test(\"The total price is number \", function () {\r",
                    "    pm.expect(typeof jsonData.booking.totalprice).to.be.eql(\"number\");\r",
                    "});\r",
                    "\r",
                    "// check the deposit paid is Boolean\r",
                    "pm.test(\"The deposit paid is boolean \", function () {\r",
                    "    pm.expect(typeof jsonData.booking.depositpaid).to.be.eql(\"boolean\");\r",
                    "});\r",
                    "\r",
                    "// check the check in String\r",
                    "pm.test(\"The check in is String \", function () {\r",
                    "        pm.expect(typeof jsonData.booking.bookingdates.checkin).to.be.eql(\"string\");\r",
                    "});\r",
                    "\r",
                    "// check the check out is String\r",
                    "pm.test(\"The check out is is String\", function () {\r",
                    "    pm.expect(typeof jsonData.booking.bookingdates.checkout).to.be.eql(\"string\");\r",
                    "});\r",
                    "\r",
                    "// check the additional is String\r",
                    "pm.test(\"The additional needs is String\", function () {\r",
                    "    pm.expect(typeof jsonData.booking.additionalneeds ).to.be.eql(\"string\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "ae06a366-cc52-456d-847a-ef02fed6f2be"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "a0ec91d1-cf09-4a5c-853f-ee3c813af2c6",
                  "type": "text/javascript",
                  "exec": [
                    "// Generate random first name \r",
                    "    var firstname = [\"Dina\", \"Eman\", \"Ahmed\", \"Alaa\", \"Aya\", \"May\",\"Salma\",\"Alaa\",\"Amany\"]; \r",
                    "    pm.environment.set(\"firstname\",(firstname[_.random(firstname.length-1)]));\r",
                    "\r",
                    "// Generate random last name \r",
                    "    var lastname = [\"Ashraf\", \"Fady\", \"Amany\", \"Mahmoud\", \"Hatem\", \"Ali\",\"Ali\",\"Kamel\",\"Ahmed\"]; \r",
                    "    pm.environment.set(\"lastname\",(lastname[_.random(lastname.length-1)]));\r",
                    "\r",
                    "//Generate Random Total Price\r",
                    "    pm.environment.set(\"totalprice\",_.random(1000,5000));\r",
                    "\r",
                    "//Generate random depositpaid\r",
                    "    pm.environment.set(\"depositpaid\",(_.random(1)===1));\r",
                    "\r",
                    "//Generate a random check-in date\r",
                    "const moment=require(\"moment\");\r",
                    "var checkinDate=moment().add(\"days\",_.random(1,180));\r",
                    "var checkoutDate =moment().add(\"days\",(_.random(180,200)));\r",
                    "pm.environment.set('checkin', checkinDate.format(\"YYYY-MM-DD\"));\r",
                    "pm.environment.set('checkout', checkoutDate.format(\"YYYY-MM-DD\"));\r",
                    "\r",
                    "//random additional\r",
                    "function getRandomBmeels() {\r",
                    "    var additionalneeds_meals = [\"Breakfast\", \"Launch\" , \"Dinner\",null];\r",
                    "    return additionalneeds_meals[_.random(additionalneeds_meals.length-1)];\r",
                    "}\r",
                    "pm.environment.set(\"additionalneeds\",getRandomBmeels())\r",
                    ""
                  ],
                  "_lastExecutionId": "ef78cdc9-185e-4917-8a6e-4cace93d3db7"
                }
              }
            ]
          },
          {
            "id": "4e3d4f38-4cc5-444f-957b-32b74895bd1a",
            "name": "GET Details For Booking ID",
            "request": {
              "url": {
                "path": [
                  "booking",
                  "{{bookingid}}"
                ],
                "host": [
                  "{{baseurl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "765e9ec3-6597-471f-94e0-7fdd5cec5a45",
                  "type": "text/javascript",
                  "exec": [
                    "// Verify the request method is GET\r",
                    "pm.test(\"Successful GET request\", function () {\r",
                    "    pm.actualMethod = pm.request.method;\r",
                    "    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
                    "});\r",
                    "\r",
                    "// Verify that the status code is 200 OK\r",
                    "pm.test(\"Status code is 200 OK\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "var jsonData = pm.response.json();\r",
                    "\r",
                    "// Verify there is no null fields.\r",
                    "// check the first name not equal null\r",
                    "pm.test(\"The first name is not equal null \", function () {\r",
                    "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the last name not equal null\r",
                    "pm.test(\"The Last name is not equal null \", function () {\r",
                    "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the total price not equal null\r",
                    "pm.test(\"The total price is not equal null \", function () {\r",
                    "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the deposit paid not equal null\r",
                    "pm.test(\"The deposit paid is not equal null \", function () {\r",
                    "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the check in not equal null\r",
                    "pm.test(\"The check in is not equal null \", function () {\r",
                    "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the check out not equal null\r",
                    "pm.test(\"The check out is not equal null \", function () {\r",
                    "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the additional needs not equal null\r",
                    "pm.test(\"The additional needs is not equal null \", function () {\r",
                    "    pm.expect(jsonData.additionalneeds ).to.not.eql(\"null\");\r",
                    "});\r",
                    "\r",
                    "// Verify the data type of all fields\r",
                    "// check the first name is string\r",
                    "pm.test(\"The first name data is String\", function () {\r",
                    "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                    "});\r",
                    "\r",
                    "// check the last name is string\r",
                    "pm.test(\"The Last name is String \", function () {\r",
                    "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                    "});\r",
                    "\r",
                    "// check the total price is number\r",
                    "pm.test(\"The total price is number \", function () {\r",
                    "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                    "});\r",
                    "\r",
                    "// check the deposit paid is Boolean\r",
                    "pm.test(\"The deposit paid is boolean \", function () {\r",
                    "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                    "});\r",
                    "\r",
                    "// check the check in String\r",
                    "pm.test(\"The check in is String \", function () {\r",
                    "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                    "});\r",
                    "\r",
                    "// check the check out is String\r",
                    "pm.test(\"The check out is is String\", function () {\r",
                    "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                    "});\r",
                    "\r",
                    "// check the additional is String\r",
                    "pm.test(\"The additional needs is String\", function () {\r",
                    "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "364d39fe-1c1c-49fc-8b79-c67ea7e6a63c"
                }
              }
            ]
          },
          {
            "id": "8695f37c-dfbd-4c12-a2e6-392ba85eb1e9",
            "name": "UPDATE Booking details",
            "request": {
              "url": {
                "path": [
                  "booking",
                  "3"
                ],
                "host": [
                  "{{baseurl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Cookie",
                  "value": "{{token}}"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "basic",
                "basic": [
                  {
                    "type": "any",
                    "value": "password123",
                    "key": "password"
                  },
                  {
                    "type": "any",
                    "value": "admin",
                    "key": "username"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "25449d6b-1b92-474c-a193-f944f1a13660",
                  "type": "text/javascript",
                  "exec": [
                    "// Verify the request method is PUT\r",
                    "pm.test(\"Successful PUT request\", function () {\r",
                    "    pm.actualMethod = pm.request.method;\r",
                    "    pm.expect(pm.actualMethod).to.eq(\"PUT\");\r",
                    "});\r",
                    "\r",
                    "// Verify that the status code is 200 OK\r",
                    "pm.test(\"Status code is 200 OK\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "var jsonData = pm.response.json();\r",
                    "\r",
                    "// Verify there is no null fields.\r",
                    "// check the first name not equal null\r",
                    "pm.test(\"The first name is not equal null \", function () {\r",
                    "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the last name not equal null\r",
                    "pm.test(\"The Last name is not equal null \", function () {\r",
                    "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the total price not equal null\r",
                    "pm.test(\"The total price is not equal null \", function () {\r",
                    "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the deposit paid not equal null\r",
                    "pm.test(\"The deposit paid is not equal null \", function () {\r",
                    "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the check in not equal null\r",
                    "pm.test(\"The check in is not equal null \", function () {\r",
                    "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the check out not equal null\r",
                    "pm.test(\"The check out is not equal null \", function () {\r",
                    "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the additional needs not equal null\r",
                    "pm.test(\"The additional needs is not equal null \", function () {\r",
                    "    pm.expect(jsonData.additionalneeds).to.not.eql(\"null\");\r",
                    "});\r",
                    "\r",
                    "// Verify the data type of all fields\r",
                    "// check the first name is string\r",
                    "pm.test(\"The first name data is String\", function () {\r",
                    "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                    "});\r",
                    "\r",
                    "// check the last name is string\r",
                    "pm.test(\"The Last name is String \", function () {\r",
                    "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                    "});\r",
                    "\r",
                    "// check the total price is number\r",
                    "pm.test(\"The total price is number \", function () {\r",
                    "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                    "});\r",
                    "\r",
                    "// check the deposit paid is Boolean\r",
                    "pm.test(\"The deposit paid is boolean \", function () {\r",
                    "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                    "});\r",
                    "\r",
                    "// check the check in String\r",
                    "pm.test(\"The check in is String \", function () {\r",
                    "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                    "});\r",
                    "\r",
                    "// check the check out is String\r",
                    "pm.test(\"The check out is is String\", function () {\r",
                    "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                    "});\r",
                    "\r",
                    "// check the additional is String\r",
                    "pm.test(\"The additional needs is String\", function () {\r",
                    "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "8a6833e7-f51a-4e5b-b735-66495973983f"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "fce6849b-2860-4a52-9758-765dc37de108",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7ec5c4f2-0f8f-430d-9904-4f2c3dc13250"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disabledSystemHeaders": {}
            }
          },
          {
            "id": "0e143436-d186-4888-8fd7-8947e9a50c88",
            "name": "PARTIAL_UPDATE Booking details",
            "request": {
              "url": {
                "path": [
                  "booking",
                  "{{bookingid}}"
                ],
                "host": [
                  "{{baseurl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Cookie",
                  "value": "{{token}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\" : \"Dina\",\r\n    \"lastname\" : \"Ashraf\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "basic",
                "basic": [
                  {
                    "type": "any",
                    "value": "password123",
                    "key": "password"
                  },
                  {
                    "type": "any",
                    "value": "admin",
                    "key": "username"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fbcba685-d907-42fe-a5b6-cc82693050ea",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "100f2e72-0d66-4e8a-b344-bdc03bb092c2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7553c98c-6e8d-40f0-aa77-fb1b7132035c",
                  "type": "text/javascript",
                  "exec": [
                    "// Check Successful PATCH reques\r",
                    "pm.test(\"Successful PATCH request\", function () {\r",
                    "    pm.actualMethod = pm.request.method;\r",
                    "    pm.expect(pm.actualMethod).to.eq(\"PATCH\");\r",
                    "});\r",
                    "\r",
                    "// Verify status code is 200 OK\r",
                    "pm.test(\"Status code is 200 OK\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "var jsonData = pm.response.json();\r",
                    "\r",
                    "// check the first name is updated\r",
                    "pm.test(\"First name is updated\", function () {\r",
                    "    pm.expect(jsonData.firstname).to.eql(\"Dina\");\r",
                    "});\r",
                    "\r",
                    "// check the last name is updated\r",
                    "pm.test(\"Last name is updated \", function () {\r",
                    "    pm.expect(jsonData.lastname).to.eql(\"Ashraf\");\r",
                    "});\r",
                    "\r",
                    "// Verify there is no null fields.\r",
                    "// check the first name not equal null\r",
                    "pm.test(\"The first name is not equal null \", function () {\r",
                    "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the last name not equal null\r",
                    "pm.test(\"The Last name is not equal null \", function () {\r",
                    "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the total price not equal null\r",
                    "pm.test(\"The total price is not equal null \", function () {\r",
                    "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the deposit paid not equal null\r",
                    "pm.test(\"The deposit paid is not equal null \", function () {\r",
                    "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the check in not equal null\r",
                    "pm.test(\"The check in is not equal null \", function () {\r",
                    "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the check out not equal null\r",
                    "pm.test(\"The check out is not equal null \", function () {\r",
                    "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                    "});\r",
                    "\r",
                    "// check the additional needs not equal null\r",
                    "pm.test(\"The additional needs is not equal null \", function () {\r",
                    "    pm.expect(jsonData.additionalneeds).to.not.eql(\"null\");\r",
                    "});\r",
                    "\r",
                    "// Verify the data type of all fields\r",
                    "// check the first name is string\r",
                    "pm.test(\"The first name data is String\", function () {\r",
                    "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                    "});\r",
                    "\r",
                    "// check the last name is string\r",
                    "pm.test(\"The Last name is String \", function () {\r",
                    "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                    "});\r",
                    "\r",
                    "// check the total price is number\r",
                    "pm.test(\"The total price is number \", function () {\r",
                    "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                    "});\r",
                    "\r",
                    "// check the deposit paid is Boolean\r",
                    "pm.test(\"The deposit paid is boolean \", function () {\r",
                    "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                    "});\r",
                    "\r",
                    "// check the check in String\r",
                    "pm.test(\"The check in is String \", function () {\r",
                    "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                    "});\r",
                    "\r",
                    "// check the check out is String\r",
                    "pm.test(\"The check out is is String\", function () {\r",
                    "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                    "});\r",
                    "\r",
                    "// check the additional is String\r",
                    "pm.test(\"The additional needs is String\", function () {\r",
                    "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "e5a41a53-c283-4239-9e76-7714bf097904"
                }
              }
            ]
          },
          {
            "id": "36331cf4-e4cf-4685-9c4f-971d32019a64",
            "name": "DELETE Booking",
            "request": {
              "url": {
                "path": [
                  "booking",
                  "{{bookingid}}"
                ],
                "host": [
                  "{{baseurl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Cookie",
                  "value": "{{token}}"
                }
              ],
              "method": "DELETE",
              "auth": {
                "type": "basic",
                "basic": [
                  {
                    "type": "any",
                    "value": "password123",
                    "key": "password"
                  },
                  {
                    "type": "any",
                    "value": "admin",
                    "key": "username"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fe7dc3ad-f002-4f19-94de-bea2994bc7b6",
                  "type": "text/javascript",
                  "exec": [
                    "// Verify the request method is GET\r",
                    "pm.test(\"Booking is deleted successfully\", function () {\r",
                    "    pm.actualMethod = pm.request.method;\r",
                    "    pm.expect(pm.actualMethod).to.eq(\"DELETE\");\r",
                    "});\r",
                    "\r",
                    "// Verify status code is 201 Created\r",
                    "pm.test(\"Status code is 201 Created\", function () {\r",
                    "    pm.response.to.have.status(201);\r",
                    "});\r",
                    "\r",
                    "// Verify the API response is Text format\r",
                    "pm.test(\"Content-Type is Text in header\", function () {\r",
                    "    pm.response.to.have.header(\"Content-Type\",\"text/plain; charset=utf-8\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "81d29ff9-1189-4e8a-b450-2ef760cb972b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2fe306a6-523c-4da8-9e04-194632e0bf89",
        "name": "HealthCheck",
        "item": [
          {
            "id": "cf5c2489-a0fa-4f8c-af85-e5df7f56c166",
            "name": "GET Ping",
            "request": {
              "url": {
                "path": [
                  "ping"
                ],
                "host": [
                  "{{baseurl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b745799d-06ad-4f0f-aef5-b3ae4688e570",
                  "type": "text/javascript",
                  "exec": [
                    "// Verify that the request method is GET\r",
                    "pm.test(\"Successful GET request\", function () {\r",
                    "    pm.actualMethod = pm.request.method;\r",
                    "    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
                    "});\r",
                    "\r",
                    "// Verify status code is 201 Created\r",
                    "pm.test(\"Status code is 201 Created\", function () {\r",
                    "    pm.response.to.have.status(201);\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "85c1b372-e0d5-461f-b63b-47a3cecc2da5"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "0534b87e-6b6e-4a16-bd4b-4396ba6772c8",
          "type": "text/javascript",
          "exec": [
            "// Generate random first name ",
            "    var firstname = [\"Dina\", \"Eman\", \"Ahmed\", \"Alaa\", \"Aya\", \"May\",\"Salma\",\"Alaa\",\"Amany\"]; ",
            "    pm.environment.set(\"firstname\",(firstname[_.random(firstname.length-1)]));",
            "",
            "// Generate random last name ",
            "    var lastname = [\"Ashraf\", \"Fady\", \"Amany\", \"Mahmoud\", \"Hatem\", \"Ali\",\"Ali\",\"Kamel\",\"Ahmed\"]; ",
            "    pm.environment.set(\"lastname\",(lastname[_.random(lastname.length-1)]));",
            "",
            "//Generate Random Total Price",
            "    pm.environment.set(\"totalprice\",_.random(1000,5000));",
            "",
            "//Generate random depositpaid",
            "    pm.environment.set(\"depositpaid\",(_.random(1)===1));",
            "",
            "//Generate a random check-in date",
            "const moment=require(\"moment\");",
            "var checkinDate=moment().add(\"days\",_.random(1,180));",
            "var checkoutDate =moment().add(\"days\",(_.random(180,200)));",
            "pm.environment.set('checkin', checkinDate.format(\"YYYY-MM-DD\"));",
            "pm.environment.set('checkout', checkoutDate.format(\"YYYY-MM-DD\"));",
            "",
            "//random additional",
            "function getRandomBmeels() {",
            "    var additionalneeds_meals = [\"Breakfast\", \"Launch\" , \"Dinner\",null];",
            "    return additionalneeds_meals[_.random(additionalneeds_meals.length-1)];",
            "}",
            "pm.environment.set(\"additionalneeds\",getRandomBmeels())",
            ""
          ],
          "_lastExecutionId": "daff0f82-b854-4e5b-938e-72dca2b6e1b9"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "528e76c6-7650-4e84-adbd-6feb80a636a8",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "557fbc92-3b65-412f-bfb5-a0dd725acb07"
        }
      }
    ],
    "variable": [],
    "info": {
      "_postman_id": "cd497a36-375d-4e6c-9794-f7d1b5aaf75a",
      "name": "RestfulBooker",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "## Testing API documentation for the website \"[Restful-booker](http://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-DeleteBooking)\"\n\nThe tests cover various endpoints and scenarios to ensure the API's functionality and reliability. The project is designed to be easily extendable and maintainable.\n\n#### Tasks\n\n- CREATE Token\n- GET ALL Booking ID\n- CREATE Booking\n- GET Details For Booking ID\n- UPDATE Booking\n- UPDATE Booking Partially\n- DELETE Booking\n- Ping - HealthCheck",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2023-10-25T16:37:05.500Z",
      "postman_exported_using": "Postman/10.19.7"
    },
    "id": "4a5c8f11-1fd4-478c-b945-b4119cb9dd03",
    "name": "Booking Project base",
    "values": [
      {
        "type": "any",
        "value": "https://restful-booker.herokuapp.com",
        "key": "baseurl"
      },
      {
        "type": "any",
        "value": 455,
        "key": "bookingid"
      },
      {
        "type": "any",
        "value": "895e5920f29fb83",
        "key": "token"
      },
      {
        "type": "any",
        "value": "Salma",
        "key": "firstname"
      },
      {
        "type": "any",
        "value": "Kamel",
        "key": "lastname"
      },
      {
        "type": "any",
        "value": 1759,
        "key": "totalprice"
      },
      {
        "type": "any",
        "value": false,
        "key": "depositpaid"
      },
      {
        "type": "any",
        "value": "2024-02-21",
        "key": "checkin"
      },
      {
        "type": "any",
        "value": "2024-05-01",
        "key": "checkout"
      },
      {
        "type": "any",
        "value": "Breakfast",
        "key": "additionalneeds"
      }
    ]
  },
  "globals": {
    "id": "53fdd215-8d40-49f9-a12d-3865aeddd39a",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 27,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 88,
        "pending": 0,
        "failed": 4
      },
      "testScripts": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 11,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 307.75,
      "responseMin": 184,
      "responseMax": 1016,
      "responseSd": 269.45906460907935,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1698252192692,
      "completed": 1698252196101
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cd39a006-3819-4ee9-81b2-d8dffb34212f",
          "httpRequestId": "a490019b-c452-4930-9a44-0b874148b17b"
        },
        "item": {
          "id": "5f50c4b1-58cd-40a3-a2d7-922f8f9aae7c",
          "name": "CREATE Token",
          "request": {
            "url": {
              "path": [
                "auth"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "45eaf1ec-1183-4853-a223-fc3a493a0c0f",
                "type": "text/javascript",
                "exec": [
                  "//verify status code is 200 OK\r",
                  "pm.test(\"Status code is 200 OK\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "//verify response is not null\r",
                  "pm.test(\"Check respone is not null\"),function(){\r",
                  "pm.expect(pm.response.json()).to.not.equal(null)\r",
                  "}\r",
                  "//verify response body contins the word token\r",
                  "pm.test(\"Body contains token\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\"token\");\r",
                  "}); \r",
                  "//verify token is not null\r",
                  "pm.test(\"Check token is not null\"),function(){\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.token).to.not.equal(null)\r",
                  "}\r",
                  "//verify token contains string\r",
                  "pm.test(\"token contains string\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(typeof jsonData.token).to.eql(\"string\");\r",
                  "    });\r",
                  "\r",
                  "//set token as environmdent variable\r",
                  "pm.environment.set(\"token\", pm.response.json().token)\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "98fbbe2c-5fda-46a5-aea5-0cfdb55b4014"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "content-type": true
            }
          }
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f3ffead7-62a7-404e-9101-fff184e3327a",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "63",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "d7e7417c-f27d-4172-9126-2d85248ac820",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "27"
            },
            {
              "key": "Etag",
              "value": "W/\"1b-bMDyArGLiY8NNLpr0baYH6UIOpA\""
            },
            {
              "key": "Date",
              "value": "Wed, 25 Oct 2023 16:43:15 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              56,
              57,
              53,
              101,
              53,
              57,
              50,
              48,
              102,
              50,
              57,
              102,
              98,
              56,
              51,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1016,
          "responseSize": 27
        },
        "id": "5f50c4b1-58cd-40a3-a2d7-922f8f9aae7c",
        "assertions": [
          {
            "assertion": "Status code is 200 OK",
            "skipped": false
          },
          {
            "assertion": "Check respone is not null",
            "skipped": false
          },
          {
            "assertion": "Body contains token",
            "skipped": false
          },
          {
            "assertion": "Check token is not null",
            "skipped": false
          },
          {
            "assertion": "token contains string",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "acb47a26-0237-4f50-9dbf-56f28d197c34",
          "length": 8,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ed273134-d09e-4e3d-9b4f-e75b8c2869ad"
        },
        "item": {
          "id": "977eb4c9-af16-4799-a9d6-4b435e252599",
          "name": "GET ALL Booking IDs",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "11271253-d3e5-4a69-932a-6c3ae0e5b5ac",
                "type": "text/javascript",
                "exec": [
                  "// Verify status code is 200 OK\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "//verify response is not null\r",
                  "pm.test(\"Check respone is not null\"),function(){\r",
                  "pm.expect(pm.response.json()).to.not.equal(null)\r",
                  "}\r",
                  "//verify response is an object\r",
                  "pm.test(\"Response is an object\"),function(){\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(typeof jsonData).to.eql(Object)\r",
                  "}\r",
                  "//verify ID is not null\r",
                  "pm.test(\"Check token is not null\"),function(){\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.bookingid).to.not.equal(null)\r",
                  "}\r",
                  "//verify ID contains numbers only\r",
                  "pm.test(\"Check bookingid is a number\"),function(){\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(typeof jsonData.bookingid).to.eql(Number)\r",
                  "}"
                ],
                "_lastExecutionId": "44c8fb10-8ecc-49ac-804e-2e2be95cbdb0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2ee679c7-dd6c-413b-8e55-334cb90a9dcf",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "08b47e41-d297-4068-b3d4-12713821de4a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1698252195&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=qrzeRfxdue1ZPy6AoyDI8%2FIyTgksqW9VzqVfbuehcH8%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1698252195&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=qrzeRfxdue1ZPy6AoyDI8%2FIyTgksqW9VzqVfbuehcH8%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "5937"
            },
            {
              "key": "Etag",
              "value": "W/\"1731-H4fMOzlgRNn7jjtzEF/EdtPY5+0\""
            },
            {
              "key": "Date",
              "value": "Wed, 25 Oct 2023 16:43:15 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              53,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              52,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              57,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              54,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              52,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              53,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              50,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              48,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              57,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              57,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              54,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              55,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              55,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              54,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              54,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              56,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              52,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              53,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              52,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              53,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              56,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              51,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              53,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              54,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              57,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              50,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              57,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              53,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              54,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              57,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              55,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              54,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              50,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              53,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              51,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              52,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              49,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              49,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              49,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              57,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              54,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              57,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              56,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              49,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              50,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              54,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              49,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              52,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              50,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              51,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              48,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              49,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              52,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              50,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              53,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              48,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              48,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              48,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              56,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              57,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              55,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              48,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              54,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              57,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              49,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              52,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              55,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              52,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              53,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              57,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              48,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              54,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              53,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              48,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              56,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              54,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              54,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              48,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              56,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              51,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              56,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              56,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              52,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              53,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              56,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              57,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              54,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              48,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              49,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              54,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              57,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              52,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              55,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              50,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              55,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              50,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              57,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              53,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              57,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              49,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              51,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              48,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              54,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              56,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              52,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              54,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              54,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              55,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              49,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              57,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              57,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              56,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              55,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              56,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              54,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              57,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              53,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              52,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              48,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              48,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              51,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              52,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              54,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              56,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              55,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              48,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              52,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              56,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              52,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              52,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              54,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              54,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              55,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              51,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              52,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              51,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              49,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              51,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              51,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              51,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              49,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              55,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              55,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              56,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              51,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              48,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              49,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              52,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              49,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              50,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              51,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              53,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              49,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              54,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              48,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              50,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              49,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              54,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              50,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              48,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              57,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              51,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              57,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              51,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              56,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              55,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              48,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              50,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              48,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              54,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              56,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              55,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              50,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              57,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              56,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              57,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              49,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              48,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              56,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              55,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              57,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              56,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              51,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              48,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              54,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              51,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              53,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              49,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              52,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              48,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              51,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              53,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              55,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              56,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              50,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              53,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              50,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              52,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              52,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              56,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              53,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              48,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              53,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              48,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              50,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              49,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              56,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              52,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              55,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              51,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              51,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              53,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              53,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              56,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              49,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              53,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              53,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              54,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              53,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              49,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              49,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              50,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              50,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              55,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              57,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              53,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              57,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              51,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              50,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              51,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              54,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              49,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              53,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              54,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              48,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              49,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              51,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              57,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              57,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              48,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              53,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              55,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              51,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              57,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              55,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              49,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              55,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              51,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              50,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              51,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              53,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              55,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              56,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              50,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              48,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              50,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              54,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              55,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              55,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              53,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              50,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              53,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              50,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              53,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              50,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              56,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              51,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              57,
              52,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              51,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              55,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              54,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              51,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              56,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              50,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              52,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              53,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              52,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              50,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              52,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              49,
              49,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              49,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              49,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              53,
              56,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              55,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              52,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              49,
              50,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              56,
              48,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              48,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              50,
              57,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              57,
              54,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              51,
              125,
              44,
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              49,
              56,
              54,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 193,
          "responseSize": 5937
        },
        "id": "977eb4c9-af16-4799-a9d6-4b435e252599",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Check respone is not null",
            "skipped": false
          },
          {
            "assertion": "Response is an object",
            "skipped": false
          },
          {
            "assertion": "Check token is not null",
            "skipped": false
          },
          {
            "assertion": "Check bookingid is a number",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9cbf5bdf-123b-4485-8c7f-7693888ea99a",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d40e57c6-b548-4f24-89e9-d8b57572a1cc"
        },
        "item": {
          "id": "d507db68-7a1f-4bba-a58e-87335a7758aa",
          "name": "CREATE Booking",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\": \"{{firstname}}\",\r\n    \"lastname\": \"{{lastname}}\",\r\n    \"totalprice\": {{totalprice}},\r\n    \"depositpaid\": {{depositpaid}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkin}}\",\r\n        \"checkout\": \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\": \"{{additionalneeds}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd6112f4-0c0e-48f2-b011-5f7392fc1f76",
                "type": "text/javascript",
                "exec": [
                  "// Verify the request method is POST\r",
                  "pm.test(\"Successful POST request\", function () {\r",
                  "    pm.actualMethod = pm.request.method;\r",
                  "    pm.expect(pm.actualMethod).to.eq(\"POST\");\r",
                  "});\r",
                  "\r",
                  "// Verify status code is 200 OK\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "// create environment variable for bookingid\r",
                  "pm.environment.set(\"bookingid\", jsonData.bookingid);\r",
                  "\r",
                  "// check the first name\r",
                  "pm.test(\"First name is correct\", function () {\r",
                  "    var firstName = pm.environment.get(\"firstname\");\r",
                  "    pm.expect(jsonData.booking.firstname).to.eql(firstName);\r",
                  "});\r",
                  "\r",
                  "// check the last name\r",
                  "pm.test(\"Last name is correct \", function () {\r",
                  "    var lastName = pm.environment.get(\"lastname\");\r",
                  "    pm.expect(jsonData.booking.lastname).to.eql(lastName);\r",
                  "});\r",
                  "\r",
                  "// check the total price \r",
                  "var totalPrice = pm.environment.get(\"totalprice\");\r",
                  "pm.test(\"Total price is correct \", function () {\r",
                  "    pm.expect(jsonData.booking.totalprice).to.eql(totalPrice);\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid \r",
                  "var depositPaid = pm.environment.get(\"depositpaid\");\r",
                  "\r",
                  "pm.test(\"Check Deposit paid \", function () {\r",
                  "    pm.expect(jsonData.booking.depositpaid).to.eql(depositPaid);\r",
                  "});\r",
                  "\r",
                  "// check the check in \r",
                  "var checkinDate = pm.environment.get(\"checkin\");\r",
                  "pm.test(\"Check in is correct \", function () {\r",
                  "    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(checkinDate);\r",
                  "});\r",
                  "\r",
                  "// check the check out \r",
                  "var checkoutDate = pm.environment.get(\"checkout\");\r",
                  "pm.test(\"Check out is correct \", function () {\r",
                  "    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(checkoutDate);\r",
                  "});\r",
                  "\r",
                  "// check the additional needs \r",
                  "var addetionNeeds = pm.environment.get(\"additionalneeds\");\r",
                  "pm.test(\"Additional needs  is correct \", function () {\r",
                  "    pm.expect(jsonData.booking.additionalneeds ).to.eql(addetionNeeds);\r",
                  "});\r",
                  "\r",
                  "// Verify there is no field in the API response equal null.\r",
                  "// check the first name not equal null\r",
                  "pm.test(\"The first name is not equal null \", function () {\r",
                  "        pm.expect(jsonData.booking.firstname).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the last name not equal null\r",
                  "pm.test(\"The Last name is not equal null \", function () {\r",
                  "    pm.expect(jsonData.booking.lastname).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the total price not equal null\r",
                  "pm.test(\"The total price is not equal null \", function () {\r",
                  "    pm.expect(jsonData.booking.totalprice).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid not equal null\r",
                  "pm.test(\"The deposit paid is not equal null \", function () {\r",
                  "    pm.expect(jsonData.booking.depositpaid).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the check in not equal null\r",
                  "pm.test(\"The check in is not equal null \", function () {\r",
                  "        pm.expect(jsonData.booking.bookingdates.checkin).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the check out not equal null\r",
                  "pm.test(\"The check out is not equal null \", function () {\r",
                  "    pm.expect(jsonData.booking.bookingdates.checkout).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the additional needs not equal null\r",
                  "pm.test(\"The additional needs is not equal null \", function () {\r",
                  "    pm.expect(jsonData.booking.additionalneeds ).to.not.eql(\"null\");\r",
                  "});\r",
                  "\r",
                  "// Verify the data type of all fields\r",
                  "// check the first name is string\r",
                  "pm.test(\"The first name data is String\", function () {\r",
                  "        pm.expect(typeof jsonData.booking.firstname).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the last name is string\r",
                  "pm.test(\"The Last name is String \", function () {\r",
                  "    pm.expect(typeof jsonData.booking.lastname).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the total price is number\r",
                  "pm.test(\"The total price is number \", function () {\r",
                  "    pm.expect(typeof jsonData.booking.totalprice).to.be.eql(\"number\");\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid is Boolean\r",
                  "pm.test(\"The deposit paid is boolean \", function () {\r",
                  "    pm.expect(typeof jsonData.booking.depositpaid).to.be.eql(\"boolean\");\r",
                  "});\r",
                  "\r",
                  "// check the check in String\r",
                  "pm.test(\"The check in is String \", function () {\r",
                  "        pm.expect(typeof jsonData.booking.bookingdates.checkin).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the check out is String\r",
                  "pm.test(\"The check out is is String\", function () {\r",
                  "    pm.expect(typeof jsonData.booking.bookingdates.checkout).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the additional is String\r",
                  "pm.test(\"The additional needs is String\", function () {\r",
                  "    pm.expect(typeof jsonData.booking.additionalneeds ).to.be.eql(\"string\");\r",
                  "});"
                ],
                "_lastExecutionId": "ae06a366-cc52-456d-847a-ef02fed6f2be"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a0ec91d1-cf09-4a5c-853f-ee3c813af2c6",
                "type": "text/javascript",
                "exec": [
                  "// Generate random first name \r",
                  "    var firstname = [\"Dina\", \"Eman\", \"Ahmed\", \"Alaa\", \"Aya\", \"May\",\"Salma\",\"Alaa\",\"Amany\"]; \r",
                  "    pm.environment.set(\"firstname\",(firstname[_.random(firstname.length-1)]));\r",
                  "\r",
                  "// Generate random last name \r",
                  "    var lastname = [\"Ashraf\", \"Fady\", \"Amany\", \"Mahmoud\", \"Hatem\", \"Ali\",\"Ali\",\"Kamel\",\"Ahmed\"]; \r",
                  "    pm.environment.set(\"lastname\",(lastname[_.random(lastname.length-1)]));\r",
                  "\r",
                  "//Generate Random Total Price\r",
                  "    pm.environment.set(\"totalprice\",_.random(1000,5000));\r",
                  "\r",
                  "//Generate random depositpaid\r",
                  "    pm.environment.set(\"depositpaid\",(_.random(1)===1));\r",
                  "\r",
                  "//Generate a random check-in date\r",
                  "const moment=require(\"moment\");\r",
                  "var checkinDate=moment().add(\"days\",_.random(1,180));\r",
                  "var checkoutDate =moment().add(\"days\",(_.random(180,200)));\r",
                  "pm.environment.set('checkin', checkinDate.format(\"YYYY-MM-DD\"));\r",
                  "pm.environment.set('checkout', checkoutDate.format(\"YYYY-MM-DD\"));\r",
                  "\r",
                  "//random additional\r",
                  "function getRandomBmeels() {\r",
                  "    var additionalneeds_meals = [\"Breakfast\", \"Launch\" , \"Dinner\",null];\r",
                  "    return additionalneeds_meals[_.random(additionalneeds_meals.length-1)];\r",
                  "}\r",
                  "pm.environment.set(\"additionalneeds\",getRandomBmeels())\r",
                  ""
                ],
                "_lastExecutionId": "ef78cdc9-185e-4917-8a6e-4cace93d3db7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1696d1ba-d1b9-4008-ab50-bbf0de5e774c",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "237",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\": \"Dina\",\r\n    \"lastname\": \"Ahmed\",\r\n    \"totalprice\": 2789,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2024-04-10\",\r\n        \"checkout\": \"2024-04-30\"\r\n    },\r\n    \"additionalneeds\": \"null\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "500cfd44-48e6-44c9-afab-f07c60384a7f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1698252196&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=fm4vFLUYOT1iUTVg76Yy4%2FwghZvIoLtEN%2FIzfhbWYUo%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1698252196&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=fm4vFLUYOT1iUTVg76Yy4%2FwghZvIoLtEN%2FIzfhbWYUo%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "193"
            },
            {
              "key": "Etag",
              "value": "W/\"c1-erQnBJVrwejh5PlpG8piypBa6/A\""
            },
            {
              "key": "Date",
              "value": "Wed, 25 Oct 2023 16:43:16 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              52,
              53,
              53,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              34,
              58,
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              105,
              110,
              97,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              104,
              109,
              101,
              100,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              50,
              55,
              56,
              57,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              52,
              45,
              49,
              48,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              52,
              45,
              51,
              48,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              110,
              117,
              108,
              108,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 184,
          "responseSize": 193
        },
        "id": "d507db68-7a1f-4bba-a58e-87335a7758aa",
        "assertions": [
          {
            "assertion": "Successful POST request",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "First name is correct",
            "skipped": false
          },
          {
            "assertion": "Last name is correct ",
            "skipped": false
          },
          {
            "assertion": "Total price is correct ",
            "skipped": false
          },
          {
            "assertion": "Check Deposit paid ",
            "skipped": false
          },
          {
            "assertion": "Check in is correct ",
            "skipped": false
          },
          {
            "assertion": "Check out is correct ",
            "skipped": false
          },
          {
            "assertion": "Additional needs  is correct ",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 8,
              "test": "Additional needs  is correct ",
              "message": "expected 'null' to deeply equal null",
              "stack": "AssertionError: expected 'null' to deeply equal null\n   at Object.eval sandbox-script.js:9:3)"
            }
          },
          {
            "assertion": "The first name is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The Last name is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The total price is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The deposit paid is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The check in is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The check out is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The additional needs is not equal null ",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 15,
              "test": "The additional needs is not equal null ",
              "message": "expected 'null' to not deeply equal 'null'",
              "stack": "AssertionError: expected 'null' to not deeply equal 'null'\n   at Object.eval sandbox-script.js:16:3)"
            }
          },
          {
            "assertion": "The first name data is String",
            "skipped": false
          },
          {
            "assertion": "The Last name is String ",
            "skipped": false
          },
          {
            "assertion": "The total price is number ",
            "skipped": false
          },
          {
            "assertion": "The deposit paid is boolean ",
            "skipped": false
          },
          {
            "assertion": "The check in is String ",
            "skipped": false
          },
          {
            "assertion": "The check out is is String",
            "skipped": false
          },
          {
            "assertion": "The additional needs is String",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8e627e35-6910-480b-b21f-423a3ebcee9d",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "18ab4b02-0038-477f-a539-2a007539034b"
        },
        "item": {
          "id": "4e3d4f38-4cc5-444f-957b-32b74895bd1a",
          "name": "GET Details For Booking ID",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{bookingid}}"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "765e9ec3-6597-471f-94e0-7fdd5cec5a45",
                "type": "text/javascript",
                "exec": [
                  "// Verify the request method is GET\r",
                  "pm.test(\"Successful GET request\", function () {\r",
                  "    pm.actualMethod = pm.request.method;\r",
                  "    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
                  "});\r",
                  "\r",
                  "// Verify that the status code is 200 OK\r",
                  "pm.test(\"Status code is 200 OK\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "// Verify there is no null fields.\r",
                  "// check the first name not equal null\r",
                  "pm.test(\"The first name is not equal null \", function () {\r",
                  "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the last name not equal null\r",
                  "pm.test(\"The Last name is not equal null \", function () {\r",
                  "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the total price not equal null\r",
                  "pm.test(\"The total price is not equal null \", function () {\r",
                  "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid not equal null\r",
                  "pm.test(\"The deposit paid is not equal null \", function () {\r",
                  "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the check in not equal null\r",
                  "pm.test(\"The check in is not equal null \", function () {\r",
                  "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the check out not equal null\r",
                  "pm.test(\"The check out is not equal null \", function () {\r",
                  "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the additional needs not equal null\r",
                  "pm.test(\"The additional needs is not equal null \", function () {\r",
                  "    pm.expect(jsonData.additionalneeds ).to.not.eql(\"null\");\r",
                  "});\r",
                  "\r",
                  "// Verify the data type of all fields\r",
                  "// check the first name is string\r",
                  "pm.test(\"The first name data is String\", function () {\r",
                  "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the last name is string\r",
                  "pm.test(\"The Last name is String \", function () {\r",
                  "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the total price is number\r",
                  "pm.test(\"The total price is number \", function () {\r",
                  "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid is Boolean\r",
                  "pm.test(\"The deposit paid is boolean \", function () {\r",
                  "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                  "});\r",
                  "\r",
                  "// check the check in String\r",
                  "pm.test(\"The check in is String \", function () {\r",
                  "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the check out is String\r",
                  "pm.test(\"The check out is is String\", function () {\r",
                  "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the additional is String\r",
                  "pm.test(\"The additional needs is String\", function () {\r",
                  "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "364d39fe-1c1c-49fc-8b79-c67ea7e6a63c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "455"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "02241646-ae06-4d86-b67b-c2a4821ea261",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "aeb2d304-90f9-417f-954b-16c4f637394b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "165"
            },
            {
              "key": "Etag",
              "value": "W/\"a5-y6Yo12snNa9a/6oYyqlwjPRQyB0\""
            },
            {
              "key": "Date",
              "value": "Wed, 25 Oct 2023 16:43:16 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              105,
              110,
              97,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              104,
              109,
              101,
              100,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              50,
              55,
              56,
              57,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              52,
              45,
              49,
              48,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              52,
              45,
              51,
              48,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              110,
              117,
              108,
              108,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 186,
          "responseSize": 165
        },
        "id": "4e3d4f38-4cc5-444f-957b-32b74895bd1a",
        "assertions": [
          {
            "assertion": "Successful GET request",
            "skipped": false
          },
          {
            "assertion": "Status code is 200 OK",
            "skipped": false
          },
          {
            "assertion": "The first name is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The Last name is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The total price is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The deposit paid is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The check in is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The check out is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The additional needs is not equal null ",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 8,
              "test": "The additional needs is not equal null ",
              "message": "expected 'null' to not deeply equal 'null'",
              "stack": "AssertionError: expected 'null' to not deeply equal 'null'\n   at Object.eval sandbox-script.js:9:4)"
            }
          },
          {
            "assertion": "The first name data is String",
            "skipped": false
          },
          {
            "assertion": "The Last name is String ",
            "skipped": false
          },
          {
            "assertion": "The total price is number ",
            "skipped": false
          },
          {
            "assertion": "The deposit paid is boolean ",
            "skipped": false
          },
          {
            "assertion": "The check in is String ",
            "skipped": false
          },
          {
            "assertion": "The check out is is String",
            "skipped": false
          },
          {
            "assertion": "The additional needs is String",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "97b20922-2c69-4c6b-b2c6-a72f92b93653",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5bc21800-0422-48c0-80af-396f7eb8455d"
        },
        "item": {
          "id": "8695f37c-dfbd-4c12-a2e6-392ba85eb1e9",
          "name": "UPDATE Booking details",
          "request": {
            "url": {
              "path": [
                "booking",
                "3"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "{{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "type": "any",
                  "value": "password123",
                  "key": "password"
                },
                {
                  "type": "any",
                  "value": "admin",
                  "key": "username"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "25449d6b-1b92-474c-a193-f944f1a13660",
                "type": "text/javascript",
                "exec": [
                  "// Verify the request method is PUT\r",
                  "pm.test(\"Successful PUT request\", function () {\r",
                  "    pm.actualMethod = pm.request.method;\r",
                  "    pm.expect(pm.actualMethod).to.eq(\"PUT\");\r",
                  "});\r",
                  "\r",
                  "// Verify that the status code is 200 OK\r",
                  "pm.test(\"Status code is 200 OK\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "// Verify there is no null fields.\r",
                  "// check the first name not equal null\r",
                  "pm.test(\"The first name is not equal null \", function () {\r",
                  "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the last name not equal null\r",
                  "pm.test(\"The Last name is not equal null \", function () {\r",
                  "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the total price not equal null\r",
                  "pm.test(\"The total price is not equal null \", function () {\r",
                  "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid not equal null\r",
                  "pm.test(\"The deposit paid is not equal null \", function () {\r",
                  "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the check in not equal null\r",
                  "pm.test(\"The check in is not equal null \", function () {\r",
                  "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the check out not equal null\r",
                  "pm.test(\"The check out is not equal null \", function () {\r",
                  "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the additional needs not equal null\r",
                  "pm.test(\"The additional needs is not equal null \", function () {\r",
                  "    pm.expect(jsonData.additionalneeds).to.not.eql(\"null\");\r",
                  "});\r",
                  "\r",
                  "// Verify the data type of all fields\r",
                  "// check the first name is string\r",
                  "pm.test(\"The first name data is String\", function () {\r",
                  "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the last name is string\r",
                  "pm.test(\"The Last name is String \", function () {\r",
                  "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the total price is number\r",
                  "pm.test(\"The total price is number \", function () {\r",
                  "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid is Boolean\r",
                  "pm.test(\"The deposit paid is boolean \", function () {\r",
                  "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                  "});\r",
                  "\r",
                  "// check the check in String\r",
                  "pm.test(\"The check in is String \", function () {\r",
                  "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the check out is String\r",
                  "pm.test(\"The check out is is String\", function () {\r",
                  "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the additional is String\r",
                  "pm.test(\"The additional needs is String\", function () {\r",
                  "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "8a6833e7-f51a-4e5b-b735-66495973983f"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "fce6849b-2860-4a52-9758-765dc37de108",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "7ec5c4f2-0f8f-430d-9904-4f2c3dc13250"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          }
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "3"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "895e5920f29fb83",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5c044fd1-1349-4dfa-9ed9-1fbfeaadbb8e",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "250",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "any",
                "value": "password123",
                "key": "password"
              },
              {
                "type": "any",
                "value": "admin",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "356cd4f0-02e8-4a21-87b7-98f7eddb1860",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1698252196&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=fm4vFLUYOT1iUTVg76Yy4%2FwghZvIoLtEN%2FIzfhbWYUo%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1698252196&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=fm4vFLUYOT1iUTVg76Yy4%2FwghZvIoLtEN%2FIzfhbWYUo%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "170"
            },
            {
              "key": "Etag",
              "value": "W/\"aa-waBDObUc25azXZ1Gkrz0LIEDGrg\""
            },
            {
              "key": "Date",
              "value": "Wed, 25 Oct 2023 16:43:16 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              109,
              101,
              115,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              49,
              49,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              49,
              56,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              49,
              57,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              66,
              114,
              101,
              97,
              107,
              102,
              97,
              115,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 190,
          "responseSize": 170
        },
        "id": "8695f37c-dfbd-4c12-a2e6-392ba85eb1e9",
        "assertions": [
          {
            "assertion": "Successful PUT request",
            "skipped": false
          },
          {
            "assertion": "Status code is 200 OK",
            "skipped": false
          },
          {
            "assertion": "The first name is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The Last name is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The total price is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The deposit paid is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The check in is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The check out is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The additional needs is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The first name data is String",
            "skipped": false
          },
          {
            "assertion": "The Last name is String ",
            "skipped": false
          },
          {
            "assertion": "The total price is number ",
            "skipped": false
          },
          {
            "assertion": "The deposit paid is boolean ",
            "skipped": false
          },
          {
            "assertion": "The check in is String ",
            "skipped": false
          },
          {
            "assertion": "The check out is is String",
            "skipped": false
          },
          {
            "assertion": "The additional needs is String",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3403c60c-fd8d-4cf7-8613-4272b76b86a9",
          "length": 8,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8ef353eb-af52-4819-b731-d3e2fc557831"
        },
        "item": {
          "id": "0e143436-d186-4888-8fd7-8947e9a50c88",
          "name": "PARTIAL_UPDATE Booking details",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{bookingid}}"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "{{token}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\" : \"Dina\",\r\n    \"lastname\" : \"Ashraf\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "type": "any",
                  "value": "password123",
                  "key": "password"
                },
                {
                  "type": "any",
                  "value": "admin",
                  "key": "username"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fbcba685-d907-42fe-a5b6-cc82693050ea",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "100f2e72-0d66-4e8a-b344-bdc03bb092c2"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7553c98c-6e8d-40f0-aa77-fb1b7132035c",
                "type": "text/javascript",
                "exec": [
                  "// Check Successful PATCH reques\r",
                  "pm.test(\"Successful PATCH request\", function () {\r",
                  "    pm.actualMethod = pm.request.method;\r",
                  "    pm.expect(pm.actualMethod).to.eq(\"PATCH\");\r",
                  "});\r",
                  "\r",
                  "// Verify status code is 200 OK\r",
                  "pm.test(\"Status code is 200 OK\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "// check the first name is updated\r",
                  "pm.test(\"First name is updated\", function () {\r",
                  "    pm.expect(jsonData.firstname).to.eql(\"Dina\");\r",
                  "});\r",
                  "\r",
                  "// check the last name is updated\r",
                  "pm.test(\"Last name is updated \", function () {\r",
                  "    pm.expect(jsonData.lastname).to.eql(\"Ashraf\");\r",
                  "});\r",
                  "\r",
                  "// Verify there is no null fields.\r",
                  "// check the first name not equal null\r",
                  "pm.test(\"The first name is not equal null \", function () {\r",
                  "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the last name not equal null\r",
                  "pm.test(\"The Last name is not equal null \", function () {\r",
                  "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the total price not equal null\r",
                  "pm.test(\"The total price is not equal null \", function () {\r",
                  "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid not equal null\r",
                  "pm.test(\"The deposit paid is not equal null \", function () {\r",
                  "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the check in not equal null\r",
                  "pm.test(\"The check in is not equal null \", function () {\r",
                  "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the check out not equal null\r",
                  "pm.test(\"The check out is not equal null \", function () {\r",
                  "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the additional needs not equal null\r",
                  "pm.test(\"The additional needs is not equal null \", function () {\r",
                  "    pm.expect(jsonData.additionalneeds).to.not.eql(\"null\");\r",
                  "});\r",
                  "\r",
                  "// Verify the data type of all fields\r",
                  "// check the first name is string\r",
                  "pm.test(\"The first name data is String\", function () {\r",
                  "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the last name is string\r",
                  "pm.test(\"The Last name is String \", function () {\r",
                  "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the total price is number\r",
                  "pm.test(\"The total price is number \", function () {\r",
                  "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid is Boolean\r",
                  "pm.test(\"The deposit paid is boolean \", function () {\r",
                  "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                  "});\r",
                  "\r",
                  "// check the check in String\r",
                  "pm.test(\"The check in is String \", function () {\r",
                  "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the check out is String\r",
                  "pm.test(\"The check out is is String\", function () {\r",
                  "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the additional is String\r",
                  "pm.test(\"The additional needs is String\", function () {\r",
                  "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "e5a41a53-c283-4239-9e76-7714bf097904"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "455"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "895e5920f29fb83",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3f3afddc-8fe3-45f1-9422-cdc17c0d373e",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "58",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\" : \"Dina\",\r\n    \"lastname\" : \"Ashraf\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "any",
                "value": "password123",
                "key": "password"
              },
              {
                "type": "any",
                "value": "admin",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "a86ec921-ab1c-4e3f-9a98-c97dfa6889e8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "166"
            },
            {
              "key": "Etag",
              "value": "W/\"a6-bifKgyfQVtx50yATQrA80vEQFFc\""
            },
            {
              "key": "Date",
              "value": "Wed, 25 Oct 2023 16:43:16 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              105,
              110,
              97,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              115,
              104,
              114,
              97,
              102,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              50,
              55,
              56,
              57,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              52,
              45,
              49,
              48,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              52,
              45,
              51,
              48,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              110,
              117,
              108,
              108,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 200,
          "responseSize": 166
        },
        "id": "0e143436-d186-4888-8fd7-8947e9a50c88",
        "assertions": [
          {
            "assertion": "Successful PATCH request",
            "skipped": false
          },
          {
            "assertion": "Status code is 200 OK",
            "skipped": false
          },
          {
            "assertion": "First name is updated",
            "skipped": false
          },
          {
            "assertion": "Last name is updated ",
            "skipped": false
          },
          {
            "assertion": "The first name is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The Last name is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The total price is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The deposit paid is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The check in is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The check out is not equal null ",
            "skipped": false
          },
          {
            "assertion": "The additional needs is not equal null ",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 10,
              "test": "The additional needs is not equal null ",
              "message": "expected 'null' to not deeply equal 'null'",
              "stack": "AssertionError: expected 'null' to not deeply equal 'null'\n   at Object.eval sandbox-script.js:11:6)"
            }
          },
          {
            "assertion": "The first name data is String",
            "skipped": false
          },
          {
            "assertion": "The Last name is String ",
            "skipped": false
          },
          {
            "assertion": "The total price is number ",
            "skipped": false
          },
          {
            "assertion": "The deposit paid is boolean ",
            "skipped": false
          },
          {
            "assertion": "The check in is String ",
            "skipped": false
          },
          {
            "assertion": "The check out is is String",
            "skipped": false
          },
          {
            "assertion": "The additional needs is String",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "28e6e20b-d7f5-4f3c-aba2-7a6b84c46164",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3555027d-f1c2-4731-a117-75c0a5f930a2"
        },
        "item": {
          "id": "36331cf4-e4cf-4685-9c4f-971d32019a64",
          "name": "DELETE Booking",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{bookingid}}"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "{{token}}"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "type": "any",
                  "value": "password123",
                  "key": "password"
                },
                {
                  "type": "any",
                  "value": "admin",
                  "key": "username"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fe7dc3ad-f002-4f19-94de-bea2994bc7b6",
                "type": "text/javascript",
                "exec": [
                  "// Verify the request method is GET\r",
                  "pm.test(\"Booking is deleted successfully\", function () {\r",
                  "    pm.actualMethod = pm.request.method;\r",
                  "    pm.expect(pm.actualMethod).to.eq(\"DELETE\");\r",
                  "});\r",
                  "\r",
                  "// Verify status code is 201 Created\r",
                  "pm.test(\"Status code is 201 Created\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "// Verify the API response is Text format\r",
                  "pm.test(\"Content-Type is Text in header\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\",\"text/plain; charset=utf-8\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "81d29ff9-1189-4e8a-b450-2ef760cb972b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "455"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "895e5920f29fb83",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5fd10e35-5581-405f-ac1f-2a8da7487e46",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "any",
                "value": "password123",
                "key": "password"
              },
              {
                "type": "any",
                "value": "admin",
                "key": "username"
              }
            ]
          }
        },
        "response": {
          "id": "8f760faf-77f5-4e7d-ba5e-755e2603d426",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "7"
            },
            {
              "key": "Etag",
              "value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
            },
            {
              "key": "Date",
              "value": "Wed, 25 Oct 2023 16:43:17 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              67,
              114,
              101,
              97,
              116,
              101,
              100
            ]
          },
          "cookie": [],
          "responseTime": 285,
          "responseSize": 7
        },
        "id": "36331cf4-e4cf-4685-9c4f-971d32019a64",
        "assertions": [
          {
            "assertion": "Booking is deleted successfully",
            "skipped": false
          },
          {
            "assertion": "Status code is 201 Created",
            "skipped": false
          },
          {
            "assertion": "Content-Type is Text in header",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a358b5df-68cb-4d9c-82ff-1a474b07ab00",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "02a72cdc-0a6e-4900-bdbe-f41f7134d363"
        },
        "item": {
          "id": "cf5c2489-a0fa-4f8c-af85-e5df7f56c166",
          "name": "GET Ping",
          "request": {
            "url": {
              "path": [
                "ping"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b745799d-06ad-4f0f-aef5-b3ae4688e570",
                "type": "text/javascript",
                "exec": [
                  "// Verify that the request method is GET\r",
                  "pm.test(\"Successful GET request\", function () {\r",
                  "    pm.actualMethod = pm.request.method;\r",
                  "    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
                  "});\r",
                  "\r",
                  "// Verify status code is 201 Created\r",
                  "pm.test(\"Status code is 201 Created\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "85c1b372-e0d5-461f-b63b-47a3cecc2da5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "ping"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e6684b2b-e91c-4db1-b4c4-0b9518f173f5",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "0c2bb36e-44df-4b12-83f5-9a04fec7c882",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1698252197&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=6atPz46M2rsRaKdtMP%2FzfRJN9VFhG7j0pR02ot%2BtDFM%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1698252197&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=6atPz46M2rsRaKdtMP%2FzfRJN9VFhG7j0pR02ot%2BtDFM%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "7"
            },
            {
              "key": "Etag",
              "value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
            },
            {
              "key": "Date",
              "value": "Wed, 25 Oct 2023 16:43:17 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              67,
              114,
              101,
              97,
              116,
              101,
              100
            ]
          },
          "cookie": [],
          "responseTime": 208,
          "responseSize": 7
        },
        "id": "cf5c2489-a0fa-4f8c-af85-e5df7f56c166",
        "assertions": [
          {
            "assertion": "Successful GET request",
            "skipped": false
          },
          {
            "assertion": "Status code is 201 Created",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 6672
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 8,
          "test": "Additional needs  is correct ",
          "message": "expected 'null' to deeply equal null",
          "stack": "AssertionError: expected 'null' to deeply equal null\n   at Object.eval sandbox-script.js:9:3)",
          "checksum": "e375b857d2f9a317320a91ef5b615c4f",
          "id": "aea1a7b6-f049-48b4-9b8c-e954500c278c",
          "timestamp": 1698252194449,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 9,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:8 in test-script",
        "source": {
          "id": "d507db68-7a1f-4bba-a58e-87335a7758aa",
          "name": "CREATE Booking",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\": \"{{firstname}}\",\r\n    \"lastname\": \"{{lastname}}\",\r\n    \"totalprice\": {{totalprice}},\r\n    \"depositpaid\": {{depositpaid}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkin}}\",\r\n        \"checkout\": \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\": \"{{additionalneeds}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd6112f4-0c0e-48f2-b011-5f7392fc1f76",
                "type": "text/javascript",
                "exec": [
                  "// Verify the request method is POST\r",
                  "pm.test(\"Successful POST request\", function () {\r",
                  "    pm.actualMethod = pm.request.method;\r",
                  "    pm.expect(pm.actualMethod).to.eq(\"POST\");\r",
                  "});\r",
                  "\r",
                  "// Verify status code is 200 OK\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "// create environment variable for bookingid\r",
                  "pm.environment.set(\"bookingid\", jsonData.bookingid);\r",
                  "\r",
                  "// check the first name\r",
                  "pm.test(\"First name is correct\", function () {\r",
                  "    var firstName = pm.environment.get(\"firstname\");\r",
                  "    pm.expect(jsonData.booking.firstname).to.eql(firstName);\r",
                  "});\r",
                  "\r",
                  "// check the last name\r",
                  "pm.test(\"Last name is correct \", function () {\r",
                  "    var lastName = pm.environment.get(\"lastname\");\r",
                  "    pm.expect(jsonData.booking.lastname).to.eql(lastName);\r",
                  "});\r",
                  "\r",
                  "// check the total price \r",
                  "var totalPrice = pm.environment.get(\"totalprice\");\r",
                  "pm.test(\"Total price is correct \", function () {\r",
                  "    pm.expect(jsonData.booking.totalprice).to.eql(totalPrice);\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid \r",
                  "var depositPaid = pm.environment.get(\"depositpaid\");\r",
                  "\r",
                  "pm.test(\"Check Deposit paid \", function () {\r",
                  "    pm.expect(jsonData.booking.depositpaid).to.eql(depositPaid);\r",
                  "});\r",
                  "\r",
                  "// check the check in \r",
                  "var checkinDate = pm.environment.get(\"checkin\");\r",
                  "pm.test(\"Check in is correct \", function () {\r",
                  "    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(checkinDate);\r",
                  "});\r",
                  "\r",
                  "// check the check out \r",
                  "var checkoutDate = pm.environment.get(\"checkout\");\r",
                  "pm.test(\"Check out is correct \", function () {\r",
                  "    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(checkoutDate);\r",
                  "});\r",
                  "\r",
                  "// check the additional needs \r",
                  "var addetionNeeds = pm.environment.get(\"additionalneeds\");\r",
                  "pm.test(\"Additional needs  is correct \", function () {\r",
                  "    pm.expect(jsonData.booking.additionalneeds ).to.eql(addetionNeeds);\r",
                  "});\r",
                  "\r",
                  "// Verify there is no field in the API response equal null.\r",
                  "// check the first name not equal null\r",
                  "pm.test(\"The first name is not equal null \", function () {\r",
                  "        pm.expect(jsonData.booking.firstname).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the last name not equal null\r",
                  "pm.test(\"The Last name is not equal null \", function () {\r",
                  "    pm.expect(jsonData.booking.lastname).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the total price not equal null\r",
                  "pm.test(\"The total price is not equal null \", function () {\r",
                  "    pm.expect(jsonData.booking.totalprice).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid not equal null\r",
                  "pm.test(\"The deposit paid is not equal null \", function () {\r",
                  "    pm.expect(jsonData.booking.depositpaid).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the check in not equal null\r",
                  "pm.test(\"The check in is not equal null \", function () {\r",
                  "        pm.expect(jsonData.booking.bookingdates.checkin).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the check out not equal null\r",
                  "pm.test(\"The check out is not equal null \", function () {\r",
                  "    pm.expect(jsonData.booking.bookingdates.checkout).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the additional needs not equal null\r",
                  "pm.test(\"The additional needs is not equal null \", function () {\r",
                  "    pm.expect(jsonData.booking.additionalneeds ).to.not.eql(\"null\");\r",
                  "});\r",
                  "\r",
                  "// Verify the data type of all fields\r",
                  "// check the first name is string\r",
                  "pm.test(\"The first name data is String\", function () {\r",
                  "        pm.expect(typeof jsonData.booking.firstname).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the last name is string\r",
                  "pm.test(\"The Last name is String \", function () {\r",
                  "    pm.expect(typeof jsonData.booking.lastname).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the total price is number\r",
                  "pm.test(\"The total price is number \", function () {\r",
                  "    pm.expect(typeof jsonData.booking.totalprice).to.be.eql(\"number\");\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid is Boolean\r",
                  "pm.test(\"The deposit paid is boolean \", function () {\r",
                  "    pm.expect(typeof jsonData.booking.depositpaid).to.be.eql(\"boolean\");\r",
                  "});\r",
                  "\r",
                  "// check the check in String\r",
                  "pm.test(\"The check in is String \", function () {\r",
                  "        pm.expect(typeof jsonData.booking.bookingdates.checkin).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the check out is String\r",
                  "pm.test(\"The check out is is String\", function () {\r",
                  "    pm.expect(typeof jsonData.booking.bookingdates.checkout).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the additional is String\r",
                  "pm.test(\"The additional needs is String\", function () {\r",
                  "    pm.expect(typeof jsonData.booking.additionalneeds ).to.be.eql(\"string\");\r",
                  "});"
                ],
                "_lastExecutionId": "ae06a366-cc52-456d-847a-ef02fed6f2be"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a0ec91d1-cf09-4a5c-853f-ee3c813af2c6",
                "type": "text/javascript",
                "exec": [
                  "// Generate random first name \r",
                  "    var firstname = [\"Dina\", \"Eman\", \"Ahmed\", \"Alaa\", \"Aya\", \"May\",\"Salma\",\"Alaa\",\"Amany\"]; \r",
                  "    pm.environment.set(\"firstname\",(firstname[_.random(firstname.length-1)]));\r",
                  "\r",
                  "// Generate random last name \r",
                  "    var lastname = [\"Ashraf\", \"Fady\", \"Amany\", \"Mahmoud\", \"Hatem\", \"Ali\",\"Ali\",\"Kamel\",\"Ahmed\"]; \r",
                  "    pm.environment.set(\"lastname\",(lastname[_.random(lastname.length-1)]));\r",
                  "\r",
                  "//Generate Random Total Price\r",
                  "    pm.environment.set(\"totalprice\",_.random(1000,5000));\r",
                  "\r",
                  "//Generate random depositpaid\r",
                  "    pm.environment.set(\"depositpaid\",(_.random(1)===1));\r",
                  "\r",
                  "//Generate a random check-in date\r",
                  "const moment=require(\"moment\");\r",
                  "var checkinDate=moment().add(\"days\",_.random(1,180));\r",
                  "var checkoutDate =moment().add(\"days\",(_.random(180,200)));\r",
                  "pm.environment.set('checkin', checkinDate.format(\"YYYY-MM-DD\"));\r",
                  "pm.environment.set('checkout', checkoutDate.format(\"YYYY-MM-DD\"));\r",
                  "\r",
                  "//random additional\r",
                  "function getRandomBmeels() {\r",
                  "    var additionalneeds_meals = [\"Breakfast\", \"Launch\" , \"Dinner\",null];\r",
                  "    return additionalneeds_meals[_.random(additionalneeds_meals.length-1)];\r",
                  "}\r",
                  "pm.environment.set(\"additionalneeds\",getRandomBmeels())\r",
                  ""
                ],
                "_lastExecutionId": "ef78cdc9-185e-4917-8a6e-4cace93d3db7"
              }
            }
          ]
        },
        "parent": {
          "id": "f4af5cd0-779d-47f6-8110-5f4f2d94f53c",
          "name": "Booking",
          "item": [
            {
              "id": "977eb4c9-af16-4799-a9d6-4b435e252599",
              "name": "GET ALL Booking IDs",
              "request": {
                "url": {
                  "path": [
                    "booking"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "11271253-d3e5-4a69-932a-6c3ae0e5b5ac",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify status code is 200 OK\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "//verify response is not null\r",
                      "pm.test(\"Check respone is not null\"),function(){\r",
                      "pm.expect(pm.response.json()).to.not.equal(null)\r",
                      "}\r",
                      "//verify response is an object\r",
                      "pm.test(\"Response is an object\"),function(){\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(typeof jsonData).to.eql(Object)\r",
                      "}\r",
                      "//verify ID is not null\r",
                      "pm.test(\"Check token is not null\"),function(){\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.bookingid).to.not.equal(null)\r",
                      "}\r",
                      "//verify ID contains numbers only\r",
                      "pm.test(\"Check bookingid is a number\"),function(){\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(typeof jsonData.bookingid).to.eql(Number)\r",
                      "}"
                    ],
                    "_lastExecutionId": "44c8fb10-8ecc-49ac-804e-2e2be95cbdb0"
                  }
                }
              ]
            },
            {
              "id": "d507db68-7a1f-4bba-a58e-87335a7758aa",
              "name": "CREATE Booking",
              "request": {
                "url": {
                  "path": [
                    "booking"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"firstname\": \"{{firstname}}\",\r\n    \"lastname\": \"{{lastname}}\",\r\n    \"totalprice\": {{totalprice}},\r\n    \"depositpaid\": {{depositpaid}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkin}}\",\r\n        \"checkout\": \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\": \"{{additionalneeds}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd6112f4-0c0e-48f2-b011-5f7392fc1f76",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify the request method is POST\r",
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"POST\");\r",
                      "});\r",
                      "\r",
                      "// Verify status code is 200 OK\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// create environment variable for bookingid\r",
                      "pm.environment.set(\"bookingid\", jsonData.bookingid);\r",
                      "\r",
                      "// check the first name\r",
                      "pm.test(\"First name is correct\", function () {\r",
                      "    var firstName = pm.environment.get(\"firstname\");\r",
                      "    pm.expect(jsonData.booking.firstname).to.eql(firstName);\r",
                      "});\r",
                      "\r",
                      "// check the last name\r",
                      "pm.test(\"Last name is correct \", function () {\r",
                      "    var lastName = pm.environment.get(\"lastname\");\r",
                      "    pm.expect(jsonData.booking.lastname).to.eql(lastName);\r",
                      "});\r",
                      "\r",
                      "// check the total price \r",
                      "var totalPrice = pm.environment.get(\"totalprice\");\r",
                      "pm.test(\"Total price is correct \", function () {\r",
                      "    pm.expect(jsonData.booking.totalprice).to.eql(totalPrice);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid \r",
                      "var depositPaid = pm.environment.get(\"depositpaid\");\r",
                      "\r",
                      "pm.test(\"Check Deposit paid \", function () {\r",
                      "    pm.expect(jsonData.booking.depositpaid).to.eql(depositPaid);\r",
                      "});\r",
                      "\r",
                      "// check the check in \r",
                      "var checkinDate = pm.environment.get(\"checkin\");\r",
                      "pm.test(\"Check in is correct \", function () {\r",
                      "    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(checkinDate);\r",
                      "});\r",
                      "\r",
                      "// check the check out \r",
                      "var checkoutDate = pm.environment.get(\"checkout\");\r",
                      "pm.test(\"Check out is correct \", function () {\r",
                      "    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(checkoutDate);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs \r",
                      "var addetionNeeds = pm.environment.get(\"additionalneeds\");\r",
                      "pm.test(\"Additional needs  is correct \", function () {\r",
                      "    pm.expect(jsonData.booking.additionalneeds ).to.eql(addetionNeeds);\r",
                      "});\r",
                      "\r",
                      "// Verify there is no field in the API response equal null.\r",
                      "// check the first name not equal null\r",
                      "pm.test(\"The first name is not equal null \", function () {\r",
                      "        pm.expect(jsonData.booking.firstname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the last name not equal null\r",
                      "pm.test(\"The Last name is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.lastname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the total price not equal null\r",
                      "pm.test(\"The total price is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.totalprice).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid not equal null\r",
                      "pm.test(\"The deposit paid is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.depositpaid).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check in not equal null\r",
                      "pm.test(\"The check in is not equal null \", function () {\r",
                      "        pm.expect(jsonData.booking.bookingdates.checkin).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check out not equal null\r",
                      "pm.test(\"The check out is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.bookingdates.checkout).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs not equal null\r",
                      "pm.test(\"The additional needs is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.additionalneeds ).to.not.eql(\"null\");\r",
                      "});\r",
                      "\r",
                      "// Verify the data type of all fields\r",
                      "// check the first name is string\r",
                      "pm.test(\"The first name data is String\", function () {\r",
                      "        pm.expect(typeof jsonData.booking.firstname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is string\r",
                      "pm.test(\"The Last name is String \", function () {\r",
                      "    pm.expect(typeof jsonData.booking.lastname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the total price is number\r",
                      "pm.test(\"The total price is number \", function () {\r",
                      "    pm.expect(typeof jsonData.booking.totalprice).to.be.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid is Boolean\r",
                      "pm.test(\"The deposit paid is boolean \", function () {\r",
                      "    pm.expect(typeof jsonData.booking.depositpaid).to.be.eql(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// check the check in String\r",
                      "pm.test(\"The check in is String \", function () {\r",
                      "        pm.expect(typeof jsonData.booking.bookingdates.checkin).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the check out is String\r",
                      "pm.test(\"The check out is is String\", function () {\r",
                      "    pm.expect(typeof jsonData.booking.bookingdates.checkout).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the additional is String\r",
                      "pm.test(\"The additional needs is String\", function () {\r",
                      "    pm.expect(typeof jsonData.booking.additionalneeds ).to.be.eql(\"string\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ae06a366-cc52-456d-847a-ef02fed6f2be"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a0ec91d1-cf09-4a5c-853f-ee3c813af2c6",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate random first name \r",
                      "    var firstname = [\"Dina\", \"Eman\", \"Ahmed\", \"Alaa\", \"Aya\", \"May\",\"Salma\",\"Alaa\",\"Amany\"]; \r",
                      "    pm.environment.set(\"firstname\",(firstname[_.random(firstname.length-1)]));\r",
                      "\r",
                      "// Generate random last name \r",
                      "    var lastname = [\"Ashraf\", \"Fady\", \"Amany\", \"Mahmoud\", \"Hatem\", \"Ali\",\"Ali\",\"Kamel\",\"Ahmed\"]; \r",
                      "    pm.environment.set(\"lastname\",(lastname[_.random(lastname.length-1)]));\r",
                      "\r",
                      "//Generate Random Total Price\r",
                      "    pm.environment.set(\"totalprice\",_.random(1000,5000));\r",
                      "\r",
                      "//Generate random depositpaid\r",
                      "    pm.environment.set(\"depositpaid\",(_.random(1)===1));\r",
                      "\r",
                      "//Generate a random check-in date\r",
                      "const moment=require(\"moment\");\r",
                      "var checkinDate=moment().add(\"days\",_.random(1,180));\r",
                      "var checkoutDate =moment().add(\"days\",(_.random(180,200)));\r",
                      "pm.environment.set('checkin', checkinDate.format(\"YYYY-MM-DD\"));\r",
                      "pm.environment.set('checkout', checkoutDate.format(\"YYYY-MM-DD\"));\r",
                      "\r",
                      "//random additional\r",
                      "function getRandomBmeels() {\r",
                      "    var additionalneeds_meals = [\"Breakfast\", \"Launch\" , \"Dinner\",null];\r",
                      "    return additionalneeds_meals[_.random(additionalneeds_meals.length-1)];\r",
                      "}\r",
                      "pm.environment.set(\"additionalneeds\",getRandomBmeels())\r",
                      ""
                    ],
                    "_lastExecutionId": "ef78cdc9-185e-4917-8a6e-4cace93d3db7"
                  }
                }
              ]
            },
            {
              "id": "4e3d4f38-4cc5-444f-957b-32b74895bd1a",
              "name": "GET Details For Booking ID",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingid}}"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "765e9ec3-6597-471f-94e0-7fdd5cec5a45",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify the request method is GET\r",
                      "pm.test(\"Successful GET request\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
                      "});\r",
                      "\r",
                      "// Verify that the status code is 200 OK\r",
                      "pm.test(\"Status code is 200 OK\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// Verify there is no null fields.\r",
                      "// check the first name not equal null\r",
                      "pm.test(\"The first name is not equal null \", function () {\r",
                      "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the last name not equal null\r",
                      "pm.test(\"The Last name is not equal null \", function () {\r",
                      "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the total price not equal null\r",
                      "pm.test(\"The total price is not equal null \", function () {\r",
                      "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid not equal null\r",
                      "pm.test(\"The deposit paid is not equal null \", function () {\r",
                      "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check in not equal null\r",
                      "pm.test(\"The check in is not equal null \", function () {\r",
                      "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check out not equal null\r",
                      "pm.test(\"The check out is not equal null \", function () {\r",
                      "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs not equal null\r",
                      "pm.test(\"The additional needs is not equal null \", function () {\r",
                      "    pm.expect(jsonData.additionalneeds ).to.not.eql(\"null\");\r",
                      "});\r",
                      "\r",
                      "// Verify the data type of all fields\r",
                      "// check the first name is string\r",
                      "pm.test(\"The first name data is String\", function () {\r",
                      "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is string\r",
                      "pm.test(\"The Last name is String \", function () {\r",
                      "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the total price is number\r",
                      "pm.test(\"The total price is number \", function () {\r",
                      "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid is Boolean\r",
                      "pm.test(\"The deposit paid is boolean \", function () {\r",
                      "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// check the check in String\r",
                      "pm.test(\"The check in is String \", function () {\r",
                      "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the check out is String\r",
                      "pm.test(\"The check out is is String\", function () {\r",
                      "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the additional is String\r",
                      "pm.test(\"The additional needs is String\", function () {\r",
                      "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "364d39fe-1c1c-49fc-8b79-c67ea7e6a63c"
                  }
                }
              ]
            },
            {
              "id": "8695f37c-dfbd-4c12-a2e6-392ba85eb1e9",
              "name": "UPDATE Booking details",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "3"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Cookie",
                    "value": "{{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "any",
                      "value": "password123",
                      "key": "password"
                    },
                    {
                      "type": "any",
                      "value": "admin",
                      "key": "username"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "25449d6b-1b92-474c-a193-f944f1a13660",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify the request method is PUT\r",
                      "pm.test(\"Successful PUT request\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"PUT\");\r",
                      "});\r",
                      "\r",
                      "// Verify that the status code is 200 OK\r",
                      "pm.test(\"Status code is 200 OK\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// Verify there is no null fields.\r",
                      "// check the first name not equal null\r",
                      "pm.test(\"The first name is not equal null \", function () {\r",
                      "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the last name not equal null\r",
                      "pm.test(\"The Last name is not equal null \", function () {\r",
                      "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the total price not equal null\r",
                      "pm.test(\"The total price is not equal null \", function () {\r",
                      "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid not equal null\r",
                      "pm.test(\"The deposit paid is not equal null \", function () {\r",
                      "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check in not equal null\r",
                      "pm.test(\"The check in is not equal null \", function () {\r",
                      "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check out not equal null\r",
                      "pm.test(\"The check out is not equal null \", function () {\r",
                      "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs not equal null\r",
                      "pm.test(\"The additional needs is not equal null \", function () {\r",
                      "    pm.expect(jsonData.additionalneeds).to.not.eql(\"null\");\r",
                      "});\r",
                      "\r",
                      "// Verify the data type of all fields\r",
                      "// check the first name is string\r",
                      "pm.test(\"The first name data is String\", function () {\r",
                      "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is string\r",
                      "pm.test(\"The Last name is String \", function () {\r",
                      "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the total price is number\r",
                      "pm.test(\"The total price is number \", function () {\r",
                      "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid is Boolean\r",
                      "pm.test(\"The deposit paid is boolean \", function () {\r",
                      "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// check the check in String\r",
                      "pm.test(\"The check in is String \", function () {\r",
                      "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the check out is String\r",
                      "pm.test(\"The check out is is String\", function () {\r",
                      "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the additional is String\r",
                      "pm.test(\"The additional needs is String\", function () {\r",
                      "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "8a6833e7-f51a-4e5b-b735-66495973983f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fce6849b-2860-4a52-9758-765dc37de108",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7ec5c4f2-0f8f-430d-9904-4f2c3dc13250"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "0e143436-d186-4888-8fd7-8947e9a50c88",
              "name": "PARTIAL_UPDATE Booking details",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingid}}"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Cookie",
                    "value": "{{token}}"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"firstname\" : \"Dina\",\r\n    \"lastname\" : \"Ashraf\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "any",
                      "value": "password123",
                      "key": "password"
                    },
                    {
                      "type": "any",
                      "value": "admin",
                      "key": "username"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fbcba685-d907-42fe-a5b6-cc82693050ea",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "100f2e72-0d66-4e8a-b344-bdc03bb092c2"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7553c98c-6e8d-40f0-aa77-fb1b7132035c",
                    "type": "text/javascript",
                    "exec": [
                      "// Check Successful PATCH reques\r",
                      "pm.test(\"Successful PATCH request\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"PATCH\");\r",
                      "});\r",
                      "\r",
                      "// Verify status code is 200 OK\r",
                      "pm.test(\"Status code is 200 OK\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// check the first name is updated\r",
                      "pm.test(\"First name is updated\", function () {\r",
                      "    pm.expect(jsonData.firstname).to.eql(\"Dina\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is updated\r",
                      "pm.test(\"Last name is updated \", function () {\r",
                      "    pm.expect(jsonData.lastname).to.eql(\"Ashraf\");\r",
                      "});\r",
                      "\r",
                      "// Verify there is no null fields.\r",
                      "// check the first name not equal null\r",
                      "pm.test(\"The first name is not equal null \", function () {\r",
                      "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the last name not equal null\r",
                      "pm.test(\"The Last name is not equal null \", function () {\r",
                      "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the total price not equal null\r",
                      "pm.test(\"The total price is not equal null \", function () {\r",
                      "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid not equal null\r",
                      "pm.test(\"The deposit paid is not equal null \", function () {\r",
                      "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check in not equal null\r",
                      "pm.test(\"The check in is not equal null \", function () {\r",
                      "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check out not equal null\r",
                      "pm.test(\"The check out is not equal null \", function () {\r",
                      "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs not equal null\r",
                      "pm.test(\"The additional needs is not equal null \", function () {\r",
                      "    pm.expect(jsonData.additionalneeds).to.not.eql(\"null\");\r",
                      "});\r",
                      "\r",
                      "// Verify the data type of all fields\r",
                      "// check the first name is string\r",
                      "pm.test(\"The first name data is String\", function () {\r",
                      "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is string\r",
                      "pm.test(\"The Last name is String \", function () {\r",
                      "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the total price is number\r",
                      "pm.test(\"The total price is number \", function () {\r",
                      "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid is Boolean\r",
                      "pm.test(\"The deposit paid is boolean \", function () {\r",
                      "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// check the check in String\r",
                      "pm.test(\"The check in is String \", function () {\r",
                      "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the check out is String\r",
                      "pm.test(\"The check out is is String\", function () {\r",
                      "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the additional is String\r",
                      "pm.test(\"The additional needs is String\", function () {\r",
                      "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e5a41a53-c283-4239-9e76-7714bf097904"
                  }
                }
              ]
            },
            {
              "id": "36331cf4-e4cf-4685-9c4f-971d32019a64",
              "name": "DELETE Booking",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingid}}"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Cookie",
                    "value": "{{token}}"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "any",
                      "value": "password123",
                      "key": "password"
                    },
                    {
                      "type": "any",
                      "value": "admin",
                      "key": "username"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fe7dc3ad-f002-4f19-94de-bea2994bc7b6",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify the request method is GET\r",
                      "pm.test(\"Booking is deleted successfully\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"DELETE\");\r",
                      "});\r",
                      "\r",
                      "// Verify status code is 201 Created\r",
                      "pm.test(\"Status code is 201 Created\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "// Verify the API response is Text format\r",
                      "pm.test(\"Content-Type is Text in header\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\",\"text/plain; charset=utf-8\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "81d29ff9-1189-4e8a-b450-2ef760cb972b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9cbf5bdf-123b-4485-8c7f-7693888ea99a",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d40e57c6-b548-4f24-89e9-d8b57572a1cc",
          "scriptId": "fd6112f4-0c0e-48f2-b011-5f7392fc1f76",
          "execution": "ae06a366-cc52-456d-847a-ef02fed6f2be"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 15,
          "test": "The additional needs is not equal null ",
          "message": "expected 'null' to not deeply equal 'null'",
          "stack": "AssertionError: expected 'null' to not deeply equal 'null'\n   at Object.eval sandbox-script.js:16:3)",
          "checksum": "f7527a7669d88d0361dd4a8a8316d4bb",
          "id": "2d8ed6d2-e75d-4aa6-94d1-1c9ed0c9d66b",
          "timestamp": 1698252194453,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 16,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:15 in test-script",
        "source": {
          "id": "d507db68-7a1f-4bba-a58e-87335a7758aa",
          "name": "CREATE Booking",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\": \"{{firstname}}\",\r\n    \"lastname\": \"{{lastname}}\",\r\n    \"totalprice\": {{totalprice}},\r\n    \"depositpaid\": {{depositpaid}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkin}}\",\r\n        \"checkout\": \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\": \"{{additionalneeds}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd6112f4-0c0e-48f2-b011-5f7392fc1f76",
                "type": "text/javascript",
                "exec": [
                  "// Verify the request method is POST\r",
                  "pm.test(\"Successful POST request\", function () {\r",
                  "    pm.actualMethod = pm.request.method;\r",
                  "    pm.expect(pm.actualMethod).to.eq(\"POST\");\r",
                  "});\r",
                  "\r",
                  "// Verify status code is 200 OK\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "// create environment variable for bookingid\r",
                  "pm.environment.set(\"bookingid\", jsonData.bookingid);\r",
                  "\r",
                  "// check the first name\r",
                  "pm.test(\"First name is correct\", function () {\r",
                  "    var firstName = pm.environment.get(\"firstname\");\r",
                  "    pm.expect(jsonData.booking.firstname).to.eql(firstName);\r",
                  "});\r",
                  "\r",
                  "// check the last name\r",
                  "pm.test(\"Last name is correct \", function () {\r",
                  "    var lastName = pm.environment.get(\"lastname\");\r",
                  "    pm.expect(jsonData.booking.lastname).to.eql(lastName);\r",
                  "});\r",
                  "\r",
                  "// check the total price \r",
                  "var totalPrice = pm.environment.get(\"totalprice\");\r",
                  "pm.test(\"Total price is correct \", function () {\r",
                  "    pm.expect(jsonData.booking.totalprice).to.eql(totalPrice);\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid \r",
                  "var depositPaid = pm.environment.get(\"depositpaid\");\r",
                  "\r",
                  "pm.test(\"Check Deposit paid \", function () {\r",
                  "    pm.expect(jsonData.booking.depositpaid).to.eql(depositPaid);\r",
                  "});\r",
                  "\r",
                  "// check the check in \r",
                  "var checkinDate = pm.environment.get(\"checkin\");\r",
                  "pm.test(\"Check in is correct \", function () {\r",
                  "    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(checkinDate);\r",
                  "});\r",
                  "\r",
                  "// check the check out \r",
                  "var checkoutDate = pm.environment.get(\"checkout\");\r",
                  "pm.test(\"Check out is correct \", function () {\r",
                  "    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(checkoutDate);\r",
                  "});\r",
                  "\r",
                  "// check the additional needs \r",
                  "var addetionNeeds = pm.environment.get(\"additionalneeds\");\r",
                  "pm.test(\"Additional needs  is correct \", function () {\r",
                  "    pm.expect(jsonData.booking.additionalneeds ).to.eql(addetionNeeds);\r",
                  "});\r",
                  "\r",
                  "// Verify there is no field in the API response equal null.\r",
                  "// check the first name not equal null\r",
                  "pm.test(\"The first name is not equal null \", function () {\r",
                  "        pm.expect(jsonData.booking.firstname).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the last name not equal null\r",
                  "pm.test(\"The Last name is not equal null \", function () {\r",
                  "    pm.expect(jsonData.booking.lastname).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the total price not equal null\r",
                  "pm.test(\"The total price is not equal null \", function () {\r",
                  "    pm.expect(jsonData.booking.totalprice).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid not equal null\r",
                  "pm.test(\"The deposit paid is not equal null \", function () {\r",
                  "    pm.expect(jsonData.booking.depositpaid).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the check in not equal null\r",
                  "pm.test(\"The check in is not equal null \", function () {\r",
                  "        pm.expect(jsonData.booking.bookingdates.checkin).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the check out not equal null\r",
                  "pm.test(\"The check out is not equal null \", function () {\r",
                  "    pm.expect(jsonData.booking.bookingdates.checkout).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the additional needs not equal null\r",
                  "pm.test(\"The additional needs is not equal null \", function () {\r",
                  "    pm.expect(jsonData.booking.additionalneeds ).to.not.eql(\"null\");\r",
                  "});\r",
                  "\r",
                  "// Verify the data type of all fields\r",
                  "// check the first name is string\r",
                  "pm.test(\"The first name data is String\", function () {\r",
                  "        pm.expect(typeof jsonData.booking.firstname).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the last name is string\r",
                  "pm.test(\"The Last name is String \", function () {\r",
                  "    pm.expect(typeof jsonData.booking.lastname).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the total price is number\r",
                  "pm.test(\"The total price is number \", function () {\r",
                  "    pm.expect(typeof jsonData.booking.totalprice).to.be.eql(\"number\");\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid is Boolean\r",
                  "pm.test(\"The deposit paid is boolean \", function () {\r",
                  "    pm.expect(typeof jsonData.booking.depositpaid).to.be.eql(\"boolean\");\r",
                  "});\r",
                  "\r",
                  "// check the check in String\r",
                  "pm.test(\"The check in is String \", function () {\r",
                  "        pm.expect(typeof jsonData.booking.bookingdates.checkin).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the check out is String\r",
                  "pm.test(\"The check out is is String\", function () {\r",
                  "    pm.expect(typeof jsonData.booking.bookingdates.checkout).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the additional is String\r",
                  "pm.test(\"The additional needs is String\", function () {\r",
                  "    pm.expect(typeof jsonData.booking.additionalneeds ).to.be.eql(\"string\");\r",
                  "});"
                ],
                "_lastExecutionId": "ae06a366-cc52-456d-847a-ef02fed6f2be"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a0ec91d1-cf09-4a5c-853f-ee3c813af2c6",
                "type": "text/javascript",
                "exec": [
                  "// Generate random first name \r",
                  "    var firstname = [\"Dina\", \"Eman\", \"Ahmed\", \"Alaa\", \"Aya\", \"May\",\"Salma\",\"Alaa\",\"Amany\"]; \r",
                  "    pm.environment.set(\"firstname\",(firstname[_.random(firstname.length-1)]));\r",
                  "\r",
                  "// Generate random last name \r",
                  "    var lastname = [\"Ashraf\", \"Fady\", \"Amany\", \"Mahmoud\", \"Hatem\", \"Ali\",\"Ali\",\"Kamel\",\"Ahmed\"]; \r",
                  "    pm.environment.set(\"lastname\",(lastname[_.random(lastname.length-1)]));\r",
                  "\r",
                  "//Generate Random Total Price\r",
                  "    pm.environment.set(\"totalprice\",_.random(1000,5000));\r",
                  "\r",
                  "//Generate random depositpaid\r",
                  "    pm.environment.set(\"depositpaid\",(_.random(1)===1));\r",
                  "\r",
                  "//Generate a random check-in date\r",
                  "const moment=require(\"moment\");\r",
                  "var checkinDate=moment().add(\"days\",_.random(1,180));\r",
                  "var checkoutDate =moment().add(\"days\",(_.random(180,200)));\r",
                  "pm.environment.set('checkin', checkinDate.format(\"YYYY-MM-DD\"));\r",
                  "pm.environment.set('checkout', checkoutDate.format(\"YYYY-MM-DD\"));\r",
                  "\r",
                  "//random additional\r",
                  "function getRandomBmeels() {\r",
                  "    var additionalneeds_meals = [\"Breakfast\", \"Launch\" , \"Dinner\",null];\r",
                  "    return additionalneeds_meals[_.random(additionalneeds_meals.length-1)];\r",
                  "}\r",
                  "pm.environment.set(\"additionalneeds\",getRandomBmeels())\r",
                  ""
                ],
                "_lastExecutionId": "ef78cdc9-185e-4917-8a6e-4cace93d3db7"
              }
            }
          ]
        },
        "parent": {
          "id": "f4af5cd0-779d-47f6-8110-5f4f2d94f53c",
          "name": "Booking",
          "item": [
            {
              "id": "977eb4c9-af16-4799-a9d6-4b435e252599",
              "name": "GET ALL Booking IDs",
              "request": {
                "url": {
                  "path": [
                    "booking"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "11271253-d3e5-4a69-932a-6c3ae0e5b5ac",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify status code is 200 OK\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "//verify response is not null\r",
                      "pm.test(\"Check respone is not null\"),function(){\r",
                      "pm.expect(pm.response.json()).to.not.equal(null)\r",
                      "}\r",
                      "//verify response is an object\r",
                      "pm.test(\"Response is an object\"),function(){\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(typeof jsonData).to.eql(Object)\r",
                      "}\r",
                      "//verify ID is not null\r",
                      "pm.test(\"Check token is not null\"),function(){\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.bookingid).to.not.equal(null)\r",
                      "}\r",
                      "//verify ID contains numbers only\r",
                      "pm.test(\"Check bookingid is a number\"),function(){\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(typeof jsonData.bookingid).to.eql(Number)\r",
                      "}"
                    ],
                    "_lastExecutionId": "44c8fb10-8ecc-49ac-804e-2e2be95cbdb0"
                  }
                }
              ]
            },
            {
              "id": "d507db68-7a1f-4bba-a58e-87335a7758aa",
              "name": "CREATE Booking",
              "request": {
                "url": {
                  "path": [
                    "booking"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"firstname\": \"{{firstname}}\",\r\n    \"lastname\": \"{{lastname}}\",\r\n    \"totalprice\": {{totalprice}},\r\n    \"depositpaid\": {{depositpaid}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkin}}\",\r\n        \"checkout\": \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\": \"{{additionalneeds}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd6112f4-0c0e-48f2-b011-5f7392fc1f76",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify the request method is POST\r",
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"POST\");\r",
                      "});\r",
                      "\r",
                      "// Verify status code is 200 OK\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// create environment variable for bookingid\r",
                      "pm.environment.set(\"bookingid\", jsonData.bookingid);\r",
                      "\r",
                      "// check the first name\r",
                      "pm.test(\"First name is correct\", function () {\r",
                      "    var firstName = pm.environment.get(\"firstname\");\r",
                      "    pm.expect(jsonData.booking.firstname).to.eql(firstName);\r",
                      "});\r",
                      "\r",
                      "// check the last name\r",
                      "pm.test(\"Last name is correct \", function () {\r",
                      "    var lastName = pm.environment.get(\"lastname\");\r",
                      "    pm.expect(jsonData.booking.lastname).to.eql(lastName);\r",
                      "});\r",
                      "\r",
                      "// check the total price \r",
                      "var totalPrice = pm.environment.get(\"totalprice\");\r",
                      "pm.test(\"Total price is correct \", function () {\r",
                      "    pm.expect(jsonData.booking.totalprice).to.eql(totalPrice);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid \r",
                      "var depositPaid = pm.environment.get(\"depositpaid\");\r",
                      "\r",
                      "pm.test(\"Check Deposit paid \", function () {\r",
                      "    pm.expect(jsonData.booking.depositpaid).to.eql(depositPaid);\r",
                      "});\r",
                      "\r",
                      "// check the check in \r",
                      "var checkinDate = pm.environment.get(\"checkin\");\r",
                      "pm.test(\"Check in is correct \", function () {\r",
                      "    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(checkinDate);\r",
                      "});\r",
                      "\r",
                      "// check the check out \r",
                      "var checkoutDate = pm.environment.get(\"checkout\");\r",
                      "pm.test(\"Check out is correct \", function () {\r",
                      "    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(checkoutDate);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs \r",
                      "var addetionNeeds = pm.environment.get(\"additionalneeds\");\r",
                      "pm.test(\"Additional needs  is correct \", function () {\r",
                      "    pm.expect(jsonData.booking.additionalneeds ).to.eql(addetionNeeds);\r",
                      "});\r",
                      "\r",
                      "// Verify there is no field in the API response equal null.\r",
                      "// check the first name not equal null\r",
                      "pm.test(\"The first name is not equal null \", function () {\r",
                      "        pm.expect(jsonData.booking.firstname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the last name not equal null\r",
                      "pm.test(\"The Last name is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.lastname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the total price not equal null\r",
                      "pm.test(\"The total price is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.totalprice).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid not equal null\r",
                      "pm.test(\"The deposit paid is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.depositpaid).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check in not equal null\r",
                      "pm.test(\"The check in is not equal null \", function () {\r",
                      "        pm.expect(jsonData.booking.bookingdates.checkin).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check out not equal null\r",
                      "pm.test(\"The check out is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.bookingdates.checkout).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs not equal null\r",
                      "pm.test(\"The additional needs is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.additionalneeds ).to.not.eql(\"null\");\r",
                      "});\r",
                      "\r",
                      "// Verify the data type of all fields\r",
                      "// check the first name is string\r",
                      "pm.test(\"The first name data is String\", function () {\r",
                      "        pm.expect(typeof jsonData.booking.firstname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is string\r",
                      "pm.test(\"The Last name is String \", function () {\r",
                      "    pm.expect(typeof jsonData.booking.lastname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the total price is number\r",
                      "pm.test(\"The total price is number \", function () {\r",
                      "    pm.expect(typeof jsonData.booking.totalprice).to.be.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid is Boolean\r",
                      "pm.test(\"The deposit paid is boolean \", function () {\r",
                      "    pm.expect(typeof jsonData.booking.depositpaid).to.be.eql(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// check the check in String\r",
                      "pm.test(\"The check in is String \", function () {\r",
                      "        pm.expect(typeof jsonData.booking.bookingdates.checkin).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the check out is String\r",
                      "pm.test(\"The check out is is String\", function () {\r",
                      "    pm.expect(typeof jsonData.booking.bookingdates.checkout).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the additional is String\r",
                      "pm.test(\"The additional needs is String\", function () {\r",
                      "    pm.expect(typeof jsonData.booking.additionalneeds ).to.be.eql(\"string\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ae06a366-cc52-456d-847a-ef02fed6f2be"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a0ec91d1-cf09-4a5c-853f-ee3c813af2c6",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate random first name \r",
                      "    var firstname = [\"Dina\", \"Eman\", \"Ahmed\", \"Alaa\", \"Aya\", \"May\",\"Salma\",\"Alaa\",\"Amany\"]; \r",
                      "    pm.environment.set(\"firstname\",(firstname[_.random(firstname.length-1)]));\r",
                      "\r",
                      "// Generate random last name \r",
                      "    var lastname = [\"Ashraf\", \"Fady\", \"Amany\", \"Mahmoud\", \"Hatem\", \"Ali\",\"Ali\",\"Kamel\",\"Ahmed\"]; \r",
                      "    pm.environment.set(\"lastname\",(lastname[_.random(lastname.length-1)]));\r",
                      "\r",
                      "//Generate Random Total Price\r",
                      "    pm.environment.set(\"totalprice\",_.random(1000,5000));\r",
                      "\r",
                      "//Generate random depositpaid\r",
                      "    pm.environment.set(\"depositpaid\",(_.random(1)===1));\r",
                      "\r",
                      "//Generate a random check-in date\r",
                      "const moment=require(\"moment\");\r",
                      "var checkinDate=moment().add(\"days\",_.random(1,180));\r",
                      "var checkoutDate =moment().add(\"days\",(_.random(180,200)));\r",
                      "pm.environment.set('checkin', checkinDate.format(\"YYYY-MM-DD\"));\r",
                      "pm.environment.set('checkout', checkoutDate.format(\"YYYY-MM-DD\"));\r",
                      "\r",
                      "//random additional\r",
                      "function getRandomBmeels() {\r",
                      "    var additionalneeds_meals = [\"Breakfast\", \"Launch\" , \"Dinner\",null];\r",
                      "    return additionalneeds_meals[_.random(additionalneeds_meals.length-1)];\r",
                      "}\r",
                      "pm.environment.set(\"additionalneeds\",getRandomBmeels())\r",
                      ""
                    ],
                    "_lastExecutionId": "ef78cdc9-185e-4917-8a6e-4cace93d3db7"
                  }
                }
              ]
            },
            {
              "id": "4e3d4f38-4cc5-444f-957b-32b74895bd1a",
              "name": "GET Details For Booking ID",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingid}}"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "765e9ec3-6597-471f-94e0-7fdd5cec5a45",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify the request method is GET\r",
                      "pm.test(\"Successful GET request\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
                      "});\r",
                      "\r",
                      "// Verify that the status code is 200 OK\r",
                      "pm.test(\"Status code is 200 OK\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// Verify there is no null fields.\r",
                      "// check the first name not equal null\r",
                      "pm.test(\"The first name is not equal null \", function () {\r",
                      "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the last name not equal null\r",
                      "pm.test(\"The Last name is not equal null \", function () {\r",
                      "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the total price not equal null\r",
                      "pm.test(\"The total price is not equal null \", function () {\r",
                      "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid not equal null\r",
                      "pm.test(\"The deposit paid is not equal null \", function () {\r",
                      "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check in not equal null\r",
                      "pm.test(\"The check in is not equal null \", function () {\r",
                      "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check out not equal null\r",
                      "pm.test(\"The check out is not equal null \", function () {\r",
                      "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs not equal null\r",
                      "pm.test(\"The additional needs is not equal null \", function () {\r",
                      "    pm.expect(jsonData.additionalneeds ).to.not.eql(\"null\");\r",
                      "});\r",
                      "\r",
                      "// Verify the data type of all fields\r",
                      "// check the first name is string\r",
                      "pm.test(\"The first name data is String\", function () {\r",
                      "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is string\r",
                      "pm.test(\"The Last name is String \", function () {\r",
                      "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the total price is number\r",
                      "pm.test(\"The total price is number \", function () {\r",
                      "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid is Boolean\r",
                      "pm.test(\"The deposit paid is boolean \", function () {\r",
                      "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// check the check in String\r",
                      "pm.test(\"The check in is String \", function () {\r",
                      "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the check out is String\r",
                      "pm.test(\"The check out is is String\", function () {\r",
                      "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the additional is String\r",
                      "pm.test(\"The additional needs is String\", function () {\r",
                      "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "364d39fe-1c1c-49fc-8b79-c67ea7e6a63c"
                  }
                }
              ]
            },
            {
              "id": "8695f37c-dfbd-4c12-a2e6-392ba85eb1e9",
              "name": "UPDATE Booking details",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "3"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Cookie",
                    "value": "{{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "any",
                      "value": "password123",
                      "key": "password"
                    },
                    {
                      "type": "any",
                      "value": "admin",
                      "key": "username"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "25449d6b-1b92-474c-a193-f944f1a13660",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify the request method is PUT\r",
                      "pm.test(\"Successful PUT request\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"PUT\");\r",
                      "});\r",
                      "\r",
                      "// Verify that the status code is 200 OK\r",
                      "pm.test(\"Status code is 200 OK\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// Verify there is no null fields.\r",
                      "// check the first name not equal null\r",
                      "pm.test(\"The first name is not equal null \", function () {\r",
                      "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the last name not equal null\r",
                      "pm.test(\"The Last name is not equal null \", function () {\r",
                      "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the total price not equal null\r",
                      "pm.test(\"The total price is not equal null \", function () {\r",
                      "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid not equal null\r",
                      "pm.test(\"The deposit paid is not equal null \", function () {\r",
                      "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check in not equal null\r",
                      "pm.test(\"The check in is not equal null \", function () {\r",
                      "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check out not equal null\r",
                      "pm.test(\"The check out is not equal null \", function () {\r",
                      "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs not equal null\r",
                      "pm.test(\"The additional needs is not equal null \", function () {\r",
                      "    pm.expect(jsonData.additionalneeds).to.not.eql(\"null\");\r",
                      "});\r",
                      "\r",
                      "// Verify the data type of all fields\r",
                      "// check the first name is string\r",
                      "pm.test(\"The first name data is String\", function () {\r",
                      "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is string\r",
                      "pm.test(\"The Last name is String \", function () {\r",
                      "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the total price is number\r",
                      "pm.test(\"The total price is number \", function () {\r",
                      "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid is Boolean\r",
                      "pm.test(\"The deposit paid is boolean \", function () {\r",
                      "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// check the check in String\r",
                      "pm.test(\"The check in is String \", function () {\r",
                      "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the check out is String\r",
                      "pm.test(\"The check out is is String\", function () {\r",
                      "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the additional is String\r",
                      "pm.test(\"The additional needs is String\", function () {\r",
                      "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "8a6833e7-f51a-4e5b-b735-66495973983f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fce6849b-2860-4a52-9758-765dc37de108",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7ec5c4f2-0f8f-430d-9904-4f2c3dc13250"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "0e143436-d186-4888-8fd7-8947e9a50c88",
              "name": "PARTIAL_UPDATE Booking details",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingid}}"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Cookie",
                    "value": "{{token}}"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"firstname\" : \"Dina\",\r\n    \"lastname\" : \"Ashraf\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "any",
                      "value": "password123",
                      "key": "password"
                    },
                    {
                      "type": "any",
                      "value": "admin",
                      "key": "username"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fbcba685-d907-42fe-a5b6-cc82693050ea",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "100f2e72-0d66-4e8a-b344-bdc03bb092c2"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7553c98c-6e8d-40f0-aa77-fb1b7132035c",
                    "type": "text/javascript",
                    "exec": [
                      "// Check Successful PATCH reques\r",
                      "pm.test(\"Successful PATCH request\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"PATCH\");\r",
                      "});\r",
                      "\r",
                      "// Verify status code is 200 OK\r",
                      "pm.test(\"Status code is 200 OK\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// check the first name is updated\r",
                      "pm.test(\"First name is updated\", function () {\r",
                      "    pm.expect(jsonData.firstname).to.eql(\"Dina\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is updated\r",
                      "pm.test(\"Last name is updated \", function () {\r",
                      "    pm.expect(jsonData.lastname).to.eql(\"Ashraf\");\r",
                      "});\r",
                      "\r",
                      "// Verify there is no null fields.\r",
                      "// check the first name not equal null\r",
                      "pm.test(\"The first name is not equal null \", function () {\r",
                      "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the last name not equal null\r",
                      "pm.test(\"The Last name is not equal null \", function () {\r",
                      "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the total price not equal null\r",
                      "pm.test(\"The total price is not equal null \", function () {\r",
                      "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid not equal null\r",
                      "pm.test(\"The deposit paid is not equal null \", function () {\r",
                      "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check in not equal null\r",
                      "pm.test(\"The check in is not equal null \", function () {\r",
                      "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check out not equal null\r",
                      "pm.test(\"The check out is not equal null \", function () {\r",
                      "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs not equal null\r",
                      "pm.test(\"The additional needs is not equal null \", function () {\r",
                      "    pm.expect(jsonData.additionalneeds).to.not.eql(\"null\");\r",
                      "});\r",
                      "\r",
                      "// Verify the data type of all fields\r",
                      "// check the first name is string\r",
                      "pm.test(\"The first name data is String\", function () {\r",
                      "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is string\r",
                      "pm.test(\"The Last name is String \", function () {\r",
                      "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the total price is number\r",
                      "pm.test(\"The total price is number \", function () {\r",
                      "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid is Boolean\r",
                      "pm.test(\"The deposit paid is boolean \", function () {\r",
                      "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// check the check in String\r",
                      "pm.test(\"The check in is String \", function () {\r",
                      "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the check out is String\r",
                      "pm.test(\"The check out is is String\", function () {\r",
                      "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the additional is String\r",
                      "pm.test(\"The additional needs is String\", function () {\r",
                      "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e5a41a53-c283-4239-9e76-7714bf097904"
                  }
                }
              ]
            },
            {
              "id": "36331cf4-e4cf-4685-9c4f-971d32019a64",
              "name": "DELETE Booking",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingid}}"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Cookie",
                    "value": "{{token}}"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "any",
                      "value": "password123",
                      "key": "password"
                    },
                    {
                      "type": "any",
                      "value": "admin",
                      "key": "username"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fe7dc3ad-f002-4f19-94de-bea2994bc7b6",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify the request method is GET\r",
                      "pm.test(\"Booking is deleted successfully\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"DELETE\");\r",
                      "});\r",
                      "\r",
                      "// Verify status code is 201 Created\r",
                      "pm.test(\"Status code is 201 Created\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "// Verify the API response is Text format\r",
                      "pm.test(\"Content-Type is Text in header\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\",\"text/plain; charset=utf-8\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "81d29ff9-1189-4e8a-b450-2ef760cb972b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9cbf5bdf-123b-4485-8c7f-7693888ea99a",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d40e57c6-b548-4f24-89e9-d8b57572a1cc",
          "scriptId": "fd6112f4-0c0e-48f2-b011-5f7392fc1f76",
          "execution": "ae06a366-cc52-456d-847a-ef02fed6f2be"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 8,
          "test": "The additional needs is not equal null ",
          "message": "expected 'null' to not deeply equal 'null'",
          "stack": "AssertionError: expected 'null' to not deeply equal 'null'\n   at Object.eval sandbox-script.js:9:4)",
          "checksum": "df2b2680ed1c0ab32bddacb5fb2d9696",
          "id": "c850b156-f346-461b-9e16-6c6744d65a9c",
          "timestamp": 1698252194712,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 9,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:8 in test-script",
        "source": {
          "id": "4e3d4f38-4cc5-444f-957b-32b74895bd1a",
          "name": "GET Details For Booking ID",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{bookingid}}"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "765e9ec3-6597-471f-94e0-7fdd5cec5a45",
                "type": "text/javascript",
                "exec": [
                  "// Verify the request method is GET\r",
                  "pm.test(\"Successful GET request\", function () {\r",
                  "    pm.actualMethod = pm.request.method;\r",
                  "    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
                  "});\r",
                  "\r",
                  "// Verify that the status code is 200 OK\r",
                  "pm.test(\"Status code is 200 OK\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "// Verify there is no null fields.\r",
                  "// check the first name not equal null\r",
                  "pm.test(\"The first name is not equal null \", function () {\r",
                  "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the last name not equal null\r",
                  "pm.test(\"The Last name is not equal null \", function () {\r",
                  "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the total price not equal null\r",
                  "pm.test(\"The total price is not equal null \", function () {\r",
                  "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid not equal null\r",
                  "pm.test(\"The deposit paid is not equal null \", function () {\r",
                  "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the check in not equal null\r",
                  "pm.test(\"The check in is not equal null \", function () {\r",
                  "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the check out not equal null\r",
                  "pm.test(\"The check out is not equal null \", function () {\r",
                  "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the additional needs not equal null\r",
                  "pm.test(\"The additional needs is not equal null \", function () {\r",
                  "    pm.expect(jsonData.additionalneeds ).to.not.eql(\"null\");\r",
                  "});\r",
                  "\r",
                  "// Verify the data type of all fields\r",
                  "// check the first name is string\r",
                  "pm.test(\"The first name data is String\", function () {\r",
                  "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the last name is string\r",
                  "pm.test(\"The Last name is String \", function () {\r",
                  "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the total price is number\r",
                  "pm.test(\"The total price is number \", function () {\r",
                  "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid is Boolean\r",
                  "pm.test(\"The deposit paid is boolean \", function () {\r",
                  "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                  "});\r",
                  "\r",
                  "// check the check in String\r",
                  "pm.test(\"The check in is String \", function () {\r",
                  "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the check out is String\r",
                  "pm.test(\"The check out is is String\", function () {\r",
                  "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the additional is String\r",
                  "pm.test(\"The additional needs is String\", function () {\r",
                  "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "364d39fe-1c1c-49fc-8b79-c67ea7e6a63c"
              }
            }
          ]
        },
        "parent": {
          "id": "f4af5cd0-779d-47f6-8110-5f4f2d94f53c",
          "name": "Booking",
          "item": [
            {
              "id": "977eb4c9-af16-4799-a9d6-4b435e252599",
              "name": "GET ALL Booking IDs",
              "request": {
                "url": {
                  "path": [
                    "booking"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "11271253-d3e5-4a69-932a-6c3ae0e5b5ac",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify status code is 200 OK\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "//verify response is not null\r",
                      "pm.test(\"Check respone is not null\"),function(){\r",
                      "pm.expect(pm.response.json()).to.not.equal(null)\r",
                      "}\r",
                      "//verify response is an object\r",
                      "pm.test(\"Response is an object\"),function(){\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(typeof jsonData).to.eql(Object)\r",
                      "}\r",
                      "//verify ID is not null\r",
                      "pm.test(\"Check token is not null\"),function(){\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.bookingid).to.not.equal(null)\r",
                      "}\r",
                      "//verify ID contains numbers only\r",
                      "pm.test(\"Check bookingid is a number\"),function(){\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(typeof jsonData.bookingid).to.eql(Number)\r",
                      "}"
                    ],
                    "_lastExecutionId": "44c8fb10-8ecc-49ac-804e-2e2be95cbdb0"
                  }
                }
              ]
            },
            {
              "id": "d507db68-7a1f-4bba-a58e-87335a7758aa",
              "name": "CREATE Booking",
              "request": {
                "url": {
                  "path": [
                    "booking"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"firstname\": \"{{firstname}}\",\r\n    \"lastname\": \"{{lastname}}\",\r\n    \"totalprice\": {{totalprice}},\r\n    \"depositpaid\": {{depositpaid}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkin}}\",\r\n        \"checkout\": \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\": \"{{additionalneeds}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd6112f4-0c0e-48f2-b011-5f7392fc1f76",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify the request method is POST\r",
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"POST\");\r",
                      "});\r",
                      "\r",
                      "// Verify status code is 200 OK\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// create environment variable for bookingid\r",
                      "pm.environment.set(\"bookingid\", jsonData.bookingid);\r",
                      "\r",
                      "// check the first name\r",
                      "pm.test(\"First name is correct\", function () {\r",
                      "    var firstName = pm.environment.get(\"firstname\");\r",
                      "    pm.expect(jsonData.booking.firstname).to.eql(firstName);\r",
                      "});\r",
                      "\r",
                      "// check the last name\r",
                      "pm.test(\"Last name is correct \", function () {\r",
                      "    var lastName = pm.environment.get(\"lastname\");\r",
                      "    pm.expect(jsonData.booking.lastname).to.eql(lastName);\r",
                      "});\r",
                      "\r",
                      "// check the total price \r",
                      "var totalPrice = pm.environment.get(\"totalprice\");\r",
                      "pm.test(\"Total price is correct \", function () {\r",
                      "    pm.expect(jsonData.booking.totalprice).to.eql(totalPrice);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid \r",
                      "var depositPaid = pm.environment.get(\"depositpaid\");\r",
                      "\r",
                      "pm.test(\"Check Deposit paid \", function () {\r",
                      "    pm.expect(jsonData.booking.depositpaid).to.eql(depositPaid);\r",
                      "});\r",
                      "\r",
                      "// check the check in \r",
                      "var checkinDate = pm.environment.get(\"checkin\");\r",
                      "pm.test(\"Check in is correct \", function () {\r",
                      "    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(checkinDate);\r",
                      "});\r",
                      "\r",
                      "// check the check out \r",
                      "var checkoutDate = pm.environment.get(\"checkout\");\r",
                      "pm.test(\"Check out is correct \", function () {\r",
                      "    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(checkoutDate);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs \r",
                      "var addetionNeeds = pm.environment.get(\"additionalneeds\");\r",
                      "pm.test(\"Additional needs  is correct \", function () {\r",
                      "    pm.expect(jsonData.booking.additionalneeds ).to.eql(addetionNeeds);\r",
                      "});\r",
                      "\r",
                      "// Verify there is no field in the API response equal null.\r",
                      "// check the first name not equal null\r",
                      "pm.test(\"The first name is not equal null \", function () {\r",
                      "        pm.expect(jsonData.booking.firstname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the last name not equal null\r",
                      "pm.test(\"The Last name is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.lastname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the total price not equal null\r",
                      "pm.test(\"The total price is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.totalprice).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid not equal null\r",
                      "pm.test(\"The deposit paid is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.depositpaid).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check in not equal null\r",
                      "pm.test(\"The check in is not equal null \", function () {\r",
                      "        pm.expect(jsonData.booking.bookingdates.checkin).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check out not equal null\r",
                      "pm.test(\"The check out is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.bookingdates.checkout).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs not equal null\r",
                      "pm.test(\"The additional needs is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.additionalneeds ).to.not.eql(\"null\");\r",
                      "});\r",
                      "\r",
                      "// Verify the data type of all fields\r",
                      "// check the first name is string\r",
                      "pm.test(\"The first name data is String\", function () {\r",
                      "        pm.expect(typeof jsonData.booking.firstname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is string\r",
                      "pm.test(\"The Last name is String \", function () {\r",
                      "    pm.expect(typeof jsonData.booking.lastname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the total price is number\r",
                      "pm.test(\"The total price is number \", function () {\r",
                      "    pm.expect(typeof jsonData.booking.totalprice).to.be.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid is Boolean\r",
                      "pm.test(\"The deposit paid is boolean \", function () {\r",
                      "    pm.expect(typeof jsonData.booking.depositpaid).to.be.eql(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// check the check in String\r",
                      "pm.test(\"The check in is String \", function () {\r",
                      "        pm.expect(typeof jsonData.booking.bookingdates.checkin).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the check out is String\r",
                      "pm.test(\"The check out is is String\", function () {\r",
                      "    pm.expect(typeof jsonData.booking.bookingdates.checkout).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the additional is String\r",
                      "pm.test(\"The additional needs is String\", function () {\r",
                      "    pm.expect(typeof jsonData.booking.additionalneeds ).to.be.eql(\"string\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ae06a366-cc52-456d-847a-ef02fed6f2be"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a0ec91d1-cf09-4a5c-853f-ee3c813af2c6",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate random first name \r",
                      "    var firstname = [\"Dina\", \"Eman\", \"Ahmed\", \"Alaa\", \"Aya\", \"May\",\"Salma\",\"Alaa\",\"Amany\"]; \r",
                      "    pm.environment.set(\"firstname\",(firstname[_.random(firstname.length-1)]));\r",
                      "\r",
                      "// Generate random last name \r",
                      "    var lastname = [\"Ashraf\", \"Fady\", \"Amany\", \"Mahmoud\", \"Hatem\", \"Ali\",\"Ali\",\"Kamel\",\"Ahmed\"]; \r",
                      "    pm.environment.set(\"lastname\",(lastname[_.random(lastname.length-1)]));\r",
                      "\r",
                      "//Generate Random Total Price\r",
                      "    pm.environment.set(\"totalprice\",_.random(1000,5000));\r",
                      "\r",
                      "//Generate random depositpaid\r",
                      "    pm.environment.set(\"depositpaid\",(_.random(1)===1));\r",
                      "\r",
                      "//Generate a random check-in date\r",
                      "const moment=require(\"moment\");\r",
                      "var checkinDate=moment().add(\"days\",_.random(1,180));\r",
                      "var checkoutDate =moment().add(\"days\",(_.random(180,200)));\r",
                      "pm.environment.set('checkin', checkinDate.format(\"YYYY-MM-DD\"));\r",
                      "pm.environment.set('checkout', checkoutDate.format(\"YYYY-MM-DD\"));\r",
                      "\r",
                      "//random additional\r",
                      "function getRandomBmeels() {\r",
                      "    var additionalneeds_meals = [\"Breakfast\", \"Launch\" , \"Dinner\",null];\r",
                      "    return additionalneeds_meals[_.random(additionalneeds_meals.length-1)];\r",
                      "}\r",
                      "pm.environment.set(\"additionalneeds\",getRandomBmeels())\r",
                      ""
                    ],
                    "_lastExecutionId": "ef78cdc9-185e-4917-8a6e-4cace93d3db7"
                  }
                }
              ]
            },
            {
              "id": "4e3d4f38-4cc5-444f-957b-32b74895bd1a",
              "name": "GET Details For Booking ID",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingid}}"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "765e9ec3-6597-471f-94e0-7fdd5cec5a45",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify the request method is GET\r",
                      "pm.test(\"Successful GET request\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
                      "});\r",
                      "\r",
                      "// Verify that the status code is 200 OK\r",
                      "pm.test(\"Status code is 200 OK\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// Verify there is no null fields.\r",
                      "// check the first name not equal null\r",
                      "pm.test(\"The first name is not equal null \", function () {\r",
                      "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the last name not equal null\r",
                      "pm.test(\"The Last name is not equal null \", function () {\r",
                      "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the total price not equal null\r",
                      "pm.test(\"The total price is not equal null \", function () {\r",
                      "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid not equal null\r",
                      "pm.test(\"The deposit paid is not equal null \", function () {\r",
                      "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check in not equal null\r",
                      "pm.test(\"The check in is not equal null \", function () {\r",
                      "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check out not equal null\r",
                      "pm.test(\"The check out is not equal null \", function () {\r",
                      "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs not equal null\r",
                      "pm.test(\"The additional needs is not equal null \", function () {\r",
                      "    pm.expect(jsonData.additionalneeds ).to.not.eql(\"null\");\r",
                      "});\r",
                      "\r",
                      "// Verify the data type of all fields\r",
                      "// check the first name is string\r",
                      "pm.test(\"The first name data is String\", function () {\r",
                      "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is string\r",
                      "pm.test(\"The Last name is String \", function () {\r",
                      "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the total price is number\r",
                      "pm.test(\"The total price is number \", function () {\r",
                      "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid is Boolean\r",
                      "pm.test(\"The deposit paid is boolean \", function () {\r",
                      "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// check the check in String\r",
                      "pm.test(\"The check in is String \", function () {\r",
                      "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the check out is String\r",
                      "pm.test(\"The check out is is String\", function () {\r",
                      "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the additional is String\r",
                      "pm.test(\"The additional needs is String\", function () {\r",
                      "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "364d39fe-1c1c-49fc-8b79-c67ea7e6a63c"
                  }
                }
              ]
            },
            {
              "id": "8695f37c-dfbd-4c12-a2e6-392ba85eb1e9",
              "name": "UPDATE Booking details",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "3"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Cookie",
                    "value": "{{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "any",
                      "value": "password123",
                      "key": "password"
                    },
                    {
                      "type": "any",
                      "value": "admin",
                      "key": "username"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "25449d6b-1b92-474c-a193-f944f1a13660",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify the request method is PUT\r",
                      "pm.test(\"Successful PUT request\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"PUT\");\r",
                      "});\r",
                      "\r",
                      "// Verify that the status code is 200 OK\r",
                      "pm.test(\"Status code is 200 OK\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// Verify there is no null fields.\r",
                      "// check the first name not equal null\r",
                      "pm.test(\"The first name is not equal null \", function () {\r",
                      "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the last name not equal null\r",
                      "pm.test(\"The Last name is not equal null \", function () {\r",
                      "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the total price not equal null\r",
                      "pm.test(\"The total price is not equal null \", function () {\r",
                      "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid not equal null\r",
                      "pm.test(\"The deposit paid is not equal null \", function () {\r",
                      "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check in not equal null\r",
                      "pm.test(\"The check in is not equal null \", function () {\r",
                      "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check out not equal null\r",
                      "pm.test(\"The check out is not equal null \", function () {\r",
                      "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs not equal null\r",
                      "pm.test(\"The additional needs is not equal null \", function () {\r",
                      "    pm.expect(jsonData.additionalneeds).to.not.eql(\"null\");\r",
                      "});\r",
                      "\r",
                      "// Verify the data type of all fields\r",
                      "// check the first name is string\r",
                      "pm.test(\"The first name data is String\", function () {\r",
                      "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is string\r",
                      "pm.test(\"The Last name is String \", function () {\r",
                      "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the total price is number\r",
                      "pm.test(\"The total price is number \", function () {\r",
                      "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid is Boolean\r",
                      "pm.test(\"The deposit paid is boolean \", function () {\r",
                      "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// check the check in String\r",
                      "pm.test(\"The check in is String \", function () {\r",
                      "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the check out is String\r",
                      "pm.test(\"The check out is is String\", function () {\r",
                      "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the additional is String\r",
                      "pm.test(\"The additional needs is String\", function () {\r",
                      "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "8a6833e7-f51a-4e5b-b735-66495973983f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fce6849b-2860-4a52-9758-765dc37de108",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7ec5c4f2-0f8f-430d-9904-4f2c3dc13250"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "0e143436-d186-4888-8fd7-8947e9a50c88",
              "name": "PARTIAL_UPDATE Booking details",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingid}}"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Cookie",
                    "value": "{{token}}"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"firstname\" : \"Dina\",\r\n    \"lastname\" : \"Ashraf\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "any",
                      "value": "password123",
                      "key": "password"
                    },
                    {
                      "type": "any",
                      "value": "admin",
                      "key": "username"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fbcba685-d907-42fe-a5b6-cc82693050ea",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "100f2e72-0d66-4e8a-b344-bdc03bb092c2"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7553c98c-6e8d-40f0-aa77-fb1b7132035c",
                    "type": "text/javascript",
                    "exec": [
                      "// Check Successful PATCH reques\r",
                      "pm.test(\"Successful PATCH request\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"PATCH\");\r",
                      "});\r",
                      "\r",
                      "// Verify status code is 200 OK\r",
                      "pm.test(\"Status code is 200 OK\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// check the first name is updated\r",
                      "pm.test(\"First name is updated\", function () {\r",
                      "    pm.expect(jsonData.firstname).to.eql(\"Dina\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is updated\r",
                      "pm.test(\"Last name is updated \", function () {\r",
                      "    pm.expect(jsonData.lastname).to.eql(\"Ashraf\");\r",
                      "});\r",
                      "\r",
                      "// Verify there is no null fields.\r",
                      "// check the first name not equal null\r",
                      "pm.test(\"The first name is not equal null \", function () {\r",
                      "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the last name not equal null\r",
                      "pm.test(\"The Last name is not equal null \", function () {\r",
                      "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the total price not equal null\r",
                      "pm.test(\"The total price is not equal null \", function () {\r",
                      "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid not equal null\r",
                      "pm.test(\"The deposit paid is not equal null \", function () {\r",
                      "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check in not equal null\r",
                      "pm.test(\"The check in is not equal null \", function () {\r",
                      "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check out not equal null\r",
                      "pm.test(\"The check out is not equal null \", function () {\r",
                      "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs not equal null\r",
                      "pm.test(\"The additional needs is not equal null \", function () {\r",
                      "    pm.expect(jsonData.additionalneeds).to.not.eql(\"null\");\r",
                      "});\r",
                      "\r",
                      "// Verify the data type of all fields\r",
                      "// check the first name is string\r",
                      "pm.test(\"The first name data is String\", function () {\r",
                      "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is string\r",
                      "pm.test(\"The Last name is String \", function () {\r",
                      "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the total price is number\r",
                      "pm.test(\"The total price is number \", function () {\r",
                      "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid is Boolean\r",
                      "pm.test(\"The deposit paid is boolean \", function () {\r",
                      "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// check the check in String\r",
                      "pm.test(\"The check in is String \", function () {\r",
                      "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the check out is String\r",
                      "pm.test(\"The check out is is String\", function () {\r",
                      "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the additional is String\r",
                      "pm.test(\"The additional needs is String\", function () {\r",
                      "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e5a41a53-c283-4239-9e76-7714bf097904"
                  }
                }
              ]
            },
            {
              "id": "36331cf4-e4cf-4685-9c4f-971d32019a64",
              "name": "DELETE Booking",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingid}}"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Cookie",
                    "value": "{{token}}"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "any",
                      "value": "password123",
                      "key": "password"
                    },
                    {
                      "type": "any",
                      "value": "admin",
                      "key": "username"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fe7dc3ad-f002-4f19-94de-bea2994bc7b6",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify the request method is GET\r",
                      "pm.test(\"Booking is deleted successfully\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"DELETE\");\r",
                      "});\r",
                      "\r",
                      "// Verify status code is 201 Created\r",
                      "pm.test(\"Status code is 201 Created\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "// Verify the API response is Text format\r",
                      "pm.test(\"Content-Type is Text in header\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\",\"text/plain; charset=utf-8\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "81d29ff9-1189-4e8a-b450-2ef760cb972b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8e627e35-6910-480b-b21f-423a3ebcee9d",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "18ab4b02-0038-477f-a539-2a007539034b",
          "scriptId": "765e9ec3-6597-471f-94e0-7fdd5cec5a45",
          "execution": "364d39fe-1c1c-49fc-8b79-c67ea7e6a63c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 10,
          "test": "The additional needs is not equal null ",
          "message": "expected 'null' to not deeply equal 'null'",
          "stack": "AssertionError: expected 'null' to not deeply equal 'null'\n   at Object.eval sandbox-script.js:11:6)",
          "checksum": "91e734d8e4b928378bf6fec2c5a0135a",
          "id": "b6893e7b-36ba-4364-8dbb-03c934d13a44",
          "timestamp": 1698252195332,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 11,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:10 in test-script",
        "source": {
          "id": "0e143436-d186-4888-8fd7-8947e9a50c88",
          "name": "PARTIAL_UPDATE Booking details",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{bookingid}}"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "{{token}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\" : \"Dina\",\r\n    \"lastname\" : \"Ashraf\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "type": "any",
                  "value": "password123",
                  "key": "password"
                },
                {
                  "type": "any",
                  "value": "admin",
                  "key": "username"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fbcba685-d907-42fe-a5b6-cc82693050ea",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "100f2e72-0d66-4e8a-b344-bdc03bb092c2"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7553c98c-6e8d-40f0-aa77-fb1b7132035c",
                "type": "text/javascript",
                "exec": [
                  "// Check Successful PATCH reques\r",
                  "pm.test(\"Successful PATCH request\", function () {\r",
                  "    pm.actualMethod = pm.request.method;\r",
                  "    pm.expect(pm.actualMethod).to.eq(\"PATCH\");\r",
                  "});\r",
                  "\r",
                  "// Verify status code is 200 OK\r",
                  "pm.test(\"Status code is 200 OK\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "// check the first name is updated\r",
                  "pm.test(\"First name is updated\", function () {\r",
                  "    pm.expect(jsonData.firstname).to.eql(\"Dina\");\r",
                  "});\r",
                  "\r",
                  "// check the last name is updated\r",
                  "pm.test(\"Last name is updated \", function () {\r",
                  "    pm.expect(jsonData.lastname).to.eql(\"Ashraf\");\r",
                  "});\r",
                  "\r",
                  "// Verify there is no null fields.\r",
                  "// check the first name not equal null\r",
                  "pm.test(\"The first name is not equal null \", function () {\r",
                  "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the last name not equal null\r",
                  "pm.test(\"The Last name is not equal null \", function () {\r",
                  "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the total price not equal null\r",
                  "pm.test(\"The total price is not equal null \", function () {\r",
                  "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid not equal null\r",
                  "pm.test(\"The deposit paid is not equal null \", function () {\r",
                  "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the check in not equal null\r",
                  "pm.test(\"The check in is not equal null \", function () {\r",
                  "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the check out not equal null\r",
                  "pm.test(\"The check out is not equal null \", function () {\r",
                  "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                  "});\r",
                  "\r",
                  "// check the additional needs not equal null\r",
                  "pm.test(\"The additional needs is not equal null \", function () {\r",
                  "    pm.expect(jsonData.additionalneeds).to.not.eql(\"null\");\r",
                  "});\r",
                  "\r",
                  "// Verify the data type of all fields\r",
                  "// check the first name is string\r",
                  "pm.test(\"The first name data is String\", function () {\r",
                  "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the last name is string\r",
                  "pm.test(\"The Last name is String \", function () {\r",
                  "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the total price is number\r",
                  "pm.test(\"The total price is number \", function () {\r",
                  "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                  "});\r",
                  "\r",
                  "// check the deposit paid is Boolean\r",
                  "pm.test(\"The deposit paid is boolean \", function () {\r",
                  "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                  "});\r",
                  "\r",
                  "// check the check in String\r",
                  "pm.test(\"The check in is String \", function () {\r",
                  "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the check out is String\r",
                  "pm.test(\"The check out is is String\", function () {\r",
                  "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                  "});\r",
                  "\r",
                  "// check the additional is String\r",
                  "pm.test(\"The additional needs is String\", function () {\r",
                  "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "e5a41a53-c283-4239-9e76-7714bf097904"
              }
            }
          ]
        },
        "parent": {
          "id": "f4af5cd0-779d-47f6-8110-5f4f2d94f53c",
          "name": "Booking",
          "item": [
            {
              "id": "977eb4c9-af16-4799-a9d6-4b435e252599",
              "name": "GET ALL Booking IDs",
              "request": {
                "url": {
                  "path": [
                    "booking"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "11271253-d3e5-4a69-932a-6c3ae0e5b5ac",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify status code is 200 OK\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "//verify response is not null\r",
                      "pm.test(\"Check respone is not null\"),function(){\r",
                      "pm.expect(pm.response.json()).to.not.equal(null)\r",
                      "}\r",
                      "//verify response is an object\r",
                      "pm.test(\"Response is an object\"),function(){\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(typeof jsonData).to.eql(Object)\r",
                      "}\r",
                      "//verify ID is not null\r",
                      "pm.test(\"Check token is not null\"),function(){\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.bookingid).to.not.equal(null)\r",
                      "}\r",
                      "//verify ID contains numbers only\r",
                      "pm.test(\"Check bookingid is a number\"),function(){\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(typeof jsonData.bookingid).to.eql(Number)\r",
                      "}"
                    ],
                    "_lastExecutionId": "44c8fb10-8ecc-49ac-804e-2e2be95cbdb0"
                  }
                }
              ]
            },
            {
              "id": "d507db68-7a1f-4bba-a58e-87335a7758aa",
              "name": "CREATE Booking",
              "request": {
                "url": {
                  "path": [
                    "booking"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"firstname\": \"{{firstname}}\",\r\n    \"lastname\": \"{{lastname}}\",\r\n    \"totalprice\": {{totalprice}},\r\n    \"depositpaid\": {{depositpaid}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkin}}\",\r\n        \"checkout\": \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\": \"{{additionalneeds}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd6112f4-0c0e-48f2-b011-5f7392fc1f76",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify the request method is POST\r",
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"POST\");\r",
                      "});\r",
                      "\r",
                      "// Verify status code is 200 OK\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// create environment variable for bookingid\r",
                      "pm.environment.set(\"bookingid\", jsonData.bookingid);\r",
                      "\r",
                      "// check the first name\r",
                      "pm.test(\"First name is correct\", function () {\r",
                      "    var firstName = pm.environment.get(\"firstname\");\r",
                      "    pm.expect(jsonData.booking.firstname).to.eql(firstName);\r",
                      "});\r",
                      "\r",
                      "// check the last name\r",
                      "pm.test(\"Last name is correct \", function () {\r",
                      "    var lastName = pm.environment.get(\"lastname\");\r",
                      "    pm.expect(jsonData.booking.lastname).to.eql(lastName);\r",
                      "});\r",
                      "\r",
                      "// check the total price \r",
                      "var totalPrice = pm.environment.get(\"totalprice\");\r",
                      "pm.test(\"Total price is correct \", function () {\r",
                      "    pm.expect(jsonData.booking.totalprice).to.eql(totalPrice);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid \r",
                      "var depositPaid = pm.environment.get(\"depositpaid\");\r",
                      "\r",
                      "pm.test(\"Check Deposit paid \", function () {\r",
                      "    pm.expect(jsonData.booking.depositpaid).to.eql(depositPaid);\r",
                      "});\r",
                      "\r",
                      "// check the check in \r",
                      "var checkinDate = pm.environment.get(\"checkin\");\r",
                      "pm.test(\"Check in is correct \", function () {\r",
                      "    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(checkinDate);\r",
                      "});\r",
                      "\r",
                      "// check the check out \r",
                      "var checkoutDate = pm.environment.get(\"checkout\");\r",
                      "pm.test(\"Check out is correct \", function () {\r",
                      "    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(checkoutDate);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs \r",
                      "var addetionNeeds = pm.environment.get(\"additionalneeds\");\r",
                      "pm.test(\"Additional needs  is correct \", function () {\r",
                      "    pm.expect(jsonData.booking.additionalneeds ).to.eql(addetionNeeds);\r",
                      "});\r",
                      "\r",
                      "// Verify there is no field in the API response equal null.\r",
                      "// check the first name not equal null\r",
                      "pm.test(\"The first name is not equal null \", function () {\r",
                      "        pm.expect(jsonData.booking.firstname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the last name not equal null\r",
                      "pm.test(\"The Last name is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.lastname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the total price not equal null\r",
                      "pm.test(\"The total price is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.totalprice).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid not equal null\r",
                      "pm.test(\"The deposit paid is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.depositpaid).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check in not equal null\r",
                      "pm.test(\"The check in is not equal null \", function () {\r",
                      "        pm.expect(jsonData.booking.bookingdates.checkin).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check out not equal null\r",
                      "pm.test(\"The check out is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.bookingdates.checkout).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs not equal null\r",
                      "pm.test(\"The additional needs is not equal null \", function () {\r",
                      "    pm.expect(jsonData.booking.additionalneeds ).to.not.eql(\"null\");\r",
                      "});\r",
                      "\r",
                      "// Verify the data type of all fields\r",
                      "// check the first name is string\r",
                      "pm.test(\"The first name data is String\", function () {\r",
                      "        pm.expect(typeof jsonData.booking.firstname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is string\r",
                      "pm.test(\"The Last name is String \", function () {\r",
                      "    pm.expect(typeof jsonData.booking.lastname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the total price is number\r",
                      "pm.test(\"The total price is number \", function () {\r",
                      "    pm.expect(typeof jsonData.booking.totalprice).to.be.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid is Boolean\r",
                      "pm.test(\"The deposit paid is boolean \", function () {\r",
                      "    pm.expect(typeof jsonData.booking.depositpaid).to.be.eql(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// check the check in String\r",
                      "pm.test(\"The check in is String \", function () {\r",
                      "        pm.expect(typeof jsonData.booking.bookingdates.checkin).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the check out is String\r",
                      "pm.test(\"The check out is is String\", function () {\r",
                      "    pm.expect(typeof jsonData.booking.bookingdates.checkout).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the additional is String\r",
                      "pm.test(\"The additional needs is String\", function () {\r",
                      "    pm.expect(typeof jsonData.booking.additionalneeds ).to.be.eql(\"string\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ae06a366-cc52-456d-847a-ef02fed6f2be"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a0ec91d1-cf09-4a5c-853f-ee3c813af2c6",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate random first name \r",
                      "    var firstname = [\"Dina\", \"Eman\", \"Ahmed\", \"Alaa\", \"Aya\", \"May\",\"Salma\",\"Alaa\",\"Amany\"]; \r",
                      "    pm.environment.set(\"firstname\",(firstname[_.random(firstname.length-1)]));\r",
                      "\r",
                      "// Generate random last name \r",
                      "    var lastname = [\"Ashraf\", \"Fady\", \"Amany\", \"Mahmoud\", \"Hatem\", \"Ali\",\"Ali\",\"Kamel\",\"Ahmed\"]; \r",
                      "    pm.environment.set(\"lastname\",(lastname[_.random(lastname.length-1)]));\r",
                      "\r",
                      "//Generate Random Total Price\r",
                      "    pm.environment.set(\"totalprice\",_.random(1000,5000));\r",
                      "\r",
                      "//Generate random depositpaid\r",
                      "    pm.environment.set(\"depositpaid\",(_.random(1)===1));\r",
                      "\r",
                      "//Generate a random check-in date\r",
                      "const moment=require(\"moment\");\r",
                      "var checkinDate=moment().add(\"days\",_.random(1,180));\r",
                      "var checkoutDate =moment().add(\"days\",(_.random(180,200)));\r",
                      "pm.environment.set('checkin', checkinDate.format(\"YYYY-MM-DD\"));\r",
                      "pm.environment.set('checkout', checkoutDate.format(\"YYYY-MM-DD\"));\r",
                      "\r",
                      "//random additional\r",
                      "function getRandomBmeels() {\r",
                      "    var additionalneeds_meals = [\"Breakfast\", \"Launch\" , \"Dinner\",null];\r",
                      "    return additionalneeds_meals[_.random(additionalneeds_meals.length-1)];\r",
                      "}\r",
                      "pm.environment.set(\"additionalneeds\",getRandomBmeels())\r",
                      ""
                    ],
                    "_lastExecutionId": "ef78cdc9-185e-4917-8a6e-4cace93d3db7"
                  }
                }
              ]
            },
            {
              "id": "4e3d4f38-4cc5-444f-957b-32b74895bd1a",
              "name": "GET Details For Booking ID",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingid}}"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "765e9ec3-6597-471f-94e0-7fdd5cec5a45",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify the request method is GET\r",
                      "pm.test(\"Successful GET request\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
                      "});\r",
                      "\r",
                      "// Verify that the status code is 200 OK\r",
                      "pm.test(\"Status code is 200 OK\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// Verify there is no null fields.\r",
                      "// check the first name not equal null\r",
                      "pm.test(\"The first name is not equal null \", function () {\r",
                      "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the last name not equal null\r",
                      "pm.test(\"The Last name is not equal null \", function () {\r",
                      "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the total price not equal null\r",
                      "pm.test(\"The total price is not equal null \", function () {\r",
                      "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid not equal null\r",
                      "pm.test(\"The deposit paid is not equal null \", function () {\r",
                      "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check in not equal null\r",
                      "pm.test(\"The check in is not equal null \", function () {\r",
                      "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check out not equal null\r",
                      "pm.test(\"The check out is not equal null \", function () {\r",
                      "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs not equal null\r",
                      "pm.test(\"The additional needs is not equal null \", function () {\r",
                      "    pm.expect(jsonData.additionalneeds ).to.not.eql(\"null\");\r",
                      "});\r",
                      "\r",
                      "// Verify the data type of all fields\r",
                      "// check the first name is string\r",
                      "pm.test(\"The first name data is String\", function () {\r",
                      "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is string\r",
                      "pm.test(\"The Last name is String \", function () {\r",
                      "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the total price is number\r",
                      "pm.test(\"The total price is number \", function () {\r",
                      "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid is Boolean\r",
                      "pm.test(\"The deposit paid is boolean \", function () {\r",
                      "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// check the check in String\r",
                      "pm.test(\"The check in is String \", function () {\r",
                      "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the check out is String\r",
                      "pm.test(\"The check out is is String\", function () {\r",
                      "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the additional is String\r",
                      "pm.test(\"The additional needs is String\", function () {\r",
                      "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "364d39fe-1c1c-49fc-8b79-c67ea7e6a63c"
                  }
                }
              ]
            },
            {
              "id": "8695f37c-dfbd-4c12-a2e6-392ba85eb1e9",
              "name": "UPDATE Booking details",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "3"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Cookie",
                    "value": "{{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "any",
                      "value": "password123",
                      "key": "password"
                    },
                    {
                      "type": "any",
                      "value": "admin",
                      "key": "username"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "25449d6b-1b92-474c-a193-f944f1a13660",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify the request method is PUT\r",
                      "pm.test(\"Successful PUT request\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"PUT\");\r",
                      "});\r",
                      "\r",
                      "// Verify that the status code is 200 OK\r",
                      "pm.test(\"Status code is 200 OK\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// Verify there is no null fields.\r",
                      "// check the first name not equal null\r",
                      "pm.test(\"The first name is not equal null \", function () {\r",
                      "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the last name not equal null\r",
                      "pm.test(\"The Last name is not equal null \", function () {\r",
                      "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the total price not equal null\r",
                      "pm.test(\"The total price is not equal null \", function () {\r",
                      "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid not equal null\r",
                      "pm.test(\"The deposit paid is not equal null \", function () {\r",
                      "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check in not equal null\r",
                      "pm.test(\"The check in is not equal null \", function () {\r",
                      "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check out not equal null\r",
                      "pm.test(\"The check out is not equal null \", function () {\r",
                      "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs not equal null\r",
                      "pm.test(\"The additional needs is not equal null \", function () {\r",
                      "    pm.expect(jsonData.additionalneeds).to.not.eql(\"null\");\r",
                      "});\r",
                      "\r",
                      "// Verify the data type of all fields\r",
                      "// check the first name is string\r",
                      "pm.test(\"The first name data is String\", function () {\r",
                      "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is string\r",
                      "pm.test(\"The Last name is String \", function () {\r",
                      "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the total price is number\r",
                      "pm.test(\"The total price is number \", function () {\r",
                      "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid is Boolean\r",
                      "pm.test(\"The deposit paid is boolean \", function () {\r",
                      "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// check the check in String\r",
                      "pm.test(\"The check in is String \", function () {\r",
                      "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the check out is String\r",
                      "pm.test(\"The check out is is String\", function () {\r",
                      "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the additional is String\r",
                      "pm.test(\"The additional needs is String\", function () {\r",
                      "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "8a6833e7-f51a-4e5b-b735-66495973983f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fce6849b-2860-4a52-9758-765dc37de108",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7ec5c4f2-0f8f-430d-9904-4f2c3dc13250"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "0e143436-d186-4888-8fd7-8947e9a50c88",
              "name": "PARTIAL_UPDATE Booking details",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingid}}"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Cookie",
                    "value": "{{token}}"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"firstname\" : \"Dina\",\r\n    \"lastname\" : \"Ashraf\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "any",
                      "value": "password123",
                      "key": "password"
                    },
                    {
                      "type": "any",
                      "value": "admin",
                      "key": "username"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fbcba685-d907-42fe-a5b6-cc82693050ea",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "100f2e72-0d66-4e8a-b344-bdc03bb092c2"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7553c98c-6e8d-40f0-aa77-fb1b7132035c",
                    "type": "text/javascript",
                    "exec": [
                      "// Check Successful PATCH reques\r",
                      "pm.test(\"Successful PATCH request\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"PATCH\");\r",
                      "});\r",
                      "\r",
                      "// Verify status code is 200 OK\r",
                      "pm.test(\"Status code is 200 OK\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// check the first name is updated\r",
                      "pm.test(\"First name is updated\", function () {\r",
                      "    pm.expect(jsonData.firstname).to.eql(\"Dina\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is updated\r",
                      "pm.test(\"Last name is updated \", function () {\r",
                      "    pm.expect(jsonData.lastname).to.eql(\"Ashraf\");\r",
                      "});\r",
                      "\r",
                      "// Verify there is no null fields.\r",
                      "// check the first name not equal null\r",
                      "pm.test(\"The first name is not equal null \", function () {\r",
                      "        pm.expect(jsonData.firstname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the last name not equal null\r",
                      "pm.test(\"The Last name is not equal null \", function () {\r",
                      "    pm.expect(jsonData.lastname).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the total price not equal null\r",
                      "pm.test(\"The total price is not equal null \", function () {\r",
                      "    pm.expect(jsonData.totalprice).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid not equal null\r",
                      "pm.test(\"The deposit paid is not equal null \", function () {\r",
                      "    pm.expect(jsonData.depositpaid).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check in not equal null\r",
                      "pm.test(\"The check in is not equal null \", function () {\r",
                      "        pm.expect(jsonData.bookingdates.checkin).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the check out not equal null\r",
                      "pm.test(\"The check out is not equal null \", function () {\r",
                      "    pm.expect(jsonData.bookingdates.checkout).to.not.eql(null);\r",
                      "});\r",
                      "\r",
                      "// check the additional needs not equal null\r",
                      "pm.test(\"The additional needs is not equal null \", function () {\r",
                      "    pm.expect(jsonData.additionalneeds).to.not.eql(\"null\");\r",
                      "});\r",
                      "\r",
                      "// Verify the data type of all fields\r",
                      "// check the first name is string\r",
                      "pm.test(\"The first name data is String\", function () {\r",
                      "        pm.expect(typeof jsonData.firstname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the last name is string\r",
                      "pm.test(\"The Last name is String \", function () {\r",
                      "    pm.expect(typeof jsonData.lastname).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the total price is number\r",
                      "pm.test(\"The total price is number \", function () {\r",
                      "    pm.expect(typeof jsonData.totalprice).to.be.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "// check the deposit paid is Boolean\r",
                      "pm.test(\"The deposit paid is boolean \", function () {\r",
                      "    pm.expect(typeof jsonData.depositpaid).to.be.eql(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// check the check in String\r",
                      "pm.test(\"The check in is String \", function () {\r",
                      "        pm.expect(typeof jsonData.bookingdates.checkin).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the check out is String\r",
                      "pm.test(\"The check out is is String\", function () {\r",
                      "    pm.expect(typeof jsonData.bookingdates.checkout).to.be.eql(\"string\");\r",
                      "});\r",
                      "\r",
                      "// check the additional is String\r",
                      "pm.test(\"The additional needs is String\", function () {\r",
                      "    pm.expect(typeof jsonData.additionalneeds ).to.be.eql(\"string\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e5a41a53-c283-4239-9e76-7714bf097904"
                  }
                }
              ]
            },
            {
              "id": "36331cf4-e4cf-4685-9c4f-971d32019a64",
              "name": "DELETE Booking",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingid}}"
                  ],
                  "host": [
                    "{{baseurl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Cookie",
                    "value": "{{token}}"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "any",
                      "value": "password123",
                      "key": "password"
                    },
                    {
                      "type": "any",
                      "value": "admin",
                      "key": "username"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fe7dc3ad-f002-4f19-94de-bea2994bc7b6",
                    "type": "text/javascript",
                    "exec": [
                      "// Verify the request method is GET\r",
                      "pm.test(\"Booking is deleted successfully\", function () {\r",
                      "    pm.actualMethod = pm.request.method;\r",
                      "    pm.expect(pm.actualMethod).to.eq(\"DELETE\");\r",
                      "});\r",
                      "\r",
                      "// Verify status code is 201 Created\r",
                      "pm.test(\"Status code is 201 Created\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "// Verify the API response is Text format\r",
                      "pm.test(\"Content-Type is Text in header\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\",\"text/plain; charset=utf-8\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "81d29ff9-1189-4e8a-b450-2ef760cb972b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3403c60c-fd8d-4cf7-8613-4272b76b86a9",
          "length": 8,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8ef353eb-af52-4819-b731-d3e2fc557831",
          "scriptId": "7553c98c-6e8d-40f0-aa77-fb1b7132035c",
          "execution": "e5a41a53-c283-4239-9e76-7714bf097904"
        }
      }
    ],
    "error": null
  }
}